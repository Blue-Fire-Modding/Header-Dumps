#ifndef UE4SS_SDK_Player_Camera_Control_HPP
#define UE4SS_SDK_Player_Camera_Control_HPP

class APlayer_Camera_Control_C : public AActor
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UPostProcessComponent* LockBlur;
    class USceneComponent* DefaultSceneRoot;
    float LockBlurTime_Weight_05FA907A4F64E01B46DA589649451F5A;
    TEnumAsByte<ETimelineDirection::Type> LockBlurTime__Direction_05FA907A4F64E01B46DA589649451F5A;
    class UTimelineComponent* LockBlurTime;
    class APlayer_Character_BP_C* Char;
    bool DisableAutoFollow;
    bool InvertPitch;
    float DeltaSec;
    float PitchRate;
    float YawRate;
    class UCurveFloat* Pitch_Distance;
    float CameraTargetDistance;
    class UCurveFloat* Pitch_FOV;
    bool Override;
    class ACameraCapture_C* CameraCapture;
    bool Pause;
    TArray<class AActor*> LockActors;
    float DistanceToClosest;
    class AActor* Target;
    bool MouseIsMoving;
    float TargetTempOffsetCam;
    bool NPCTalk;
    float NPCTalkDistance;
    class UTargetLock_C* Lock;
    bool CamOnly;
    float RightTAxis;
    float RightYAxis;
    TEnumAsByte<Tabs::Type> Tab;
    bool OnlyCam;
    class UCurveFloat* CamCurve;
    class UTargetLockHint_C* Lock Hint;
    float MaxDistanceToTarget;
    bool LockedToTarget;
    float CameraNoLockTargetDistance;
    float CamDistanceOffset;
    bool CamOffset;
    float CamDistanceOffsetMaster;
    TArray<class AActor*> SpellTargets;
    float DistanceToClosestSpell;
    class AActor* SpellTarget;
    class UCurveFloat* AimCurve;
    float LockCamPitchOffset;
    float LockCamYawOffset;
    bool ObjectBelow;
    bool TempDownCheck;
    class ADebugTools_Control_C* DebugTools;
    bool DebugToolsOn;
    class AEnemy_Character_Parent_C* TargetEnemy;
    class UInventory_C* PauseUI;
    int32 SelectedItem;
    FPlayer_Camera_Control_CExitPause ExitPause;
    void ExitPause();
    bool DebugToolsActivated;
    class UEmotesUI_C* EmotesUI;
    class APlayer_Character_BP_C* Player;
    bool EmoteUI Open;
    float DistanceToClosestEnemy;
    class AEnemy_Character_Parent_C* ClosestEnemy;
    TArray<class AActor*> LockedActorsSwap;
    bool SwapBreak;
    bool SwapEnemyDetected;
    FRotator Lerp;
    bool OpenedPause;
    bool PossesedStatue;
    FPlayer_Camera_Control_CInputOn InputOn;
    void InputOn();
    FPlayer_Camera_Control_CInputOff InputOff;
    void InputOff();
    bool ShowDebugLevel;
    float CurrentEnemyPriority;
    bool IsFirstTimePause;
    FPlayer_Camera_Control_CEmote Emote;
    void Emote(TEnumAsByte<E_Emotes::Type> NewParam);
    bool LockedToEnemy;
    float LockOffsetDisplay;
    bool Editor;
    TArray<class AActor*> LockActorsUpdate;
    FVector OffsetLock;
    class USceneComponent* LockComponent;
    class APickup_C* SpawnPickup;
    class AScreenShotToolController_C* ScreenShotTool;
    class ACamControlTrailerCam_C* TrailerCam;
    class USceneComponent* TempLockComponent;
    FVector TempOffsetLock;
    class UCheatCodes_C* CheatCode;
    FPlayer_Camera_Control_CSpecialPause SpecialPause;
    void SpecialPause();
    TArray<FGodStone_Structure> TempVoidCalc;
    bool bIsFilterModeOn;
    FPlayer_Camera_Control_CVoidMakerScreenShotTaken VoidMakerScreenShotTaken;
    void VoidMakerScreenShotTaken(bool Taken, FTransform RecorderCamTransform);
    bool SkipFadeBlackThumbnail;
    bool ThumbnailMode;
    FPlayer_Camera_Control_CVMPauseMenu VMPauseMenu;
    void VMPauseMenu(bool bEnterPause);

    void LockBlurTime__FinishedFunc();
    void LockBlurTime__UpdateFunc();
    void InpActEvt_Gamepad_Quick_Emote_K2Node_InputActionEvent_9(FKey Key);
    void InpActEvt_Gamepad_Emote_Menu_K2Node_InputActionEvent_8(FKey Key);
    void InpActEvt_PC_Emote_Menu_K2Node_InputActionEvent_7(FKey Key);
    void InpActEvt_PC_Quick_Emote_K2Node_InputActionEvent_6(FKey Key);
    void InpActEvt_H_K2Node_InputKeyEvent_11(FKey Key);
    void InpActEvt_I_K2Node_InputKeyEvent_10(FKey Key);
    void InpActEvt_Zero_K2Node_InputKeyEvent_9(FKey Key);
    void InpActEvt_G_K2Node_InputKeyEvent_8(FKey Key);
    void InpActEvt_L_K2Node_InputKeyEvent_7(FKey Key);
    void InpActEvt_Generic_Special_Pause_K2Node_InputActionEvent_5(FKey Key);
    void InpActEvt_NumPadOne_K2Node_InputKeyEvent_6(FKey Key);
    void InpActEvt_NumPadOne_K2Node_InputKeyEvent_5(FKey Key);
    void InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_4(FKey Key);
    void InpActEvt_Gamepad_CamMode_K2Node_InputActionEvent_4(FKey Key);
    void InpActEvt_PC_CamMode_K2Node_InputActionEvent_3(FKey Key);
    void InpActEvt_T_K2Node_InputKeyEvent_3(FKey Key);
    void InpActEvt_R_K2Node_InputKeyEvent_2(FKey Key);
    void InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_1(FKey Key);
    void InpActEvt_Gamepad_Special_Left_K2Node_InputKeyEvent_0(FKey Key);
    void InpActEvt_Generic_Pause_K2Node_InputActionEvent_2(FKey Key);
    void InpActEvt_PC_ChangeLockTarget_K2Node_InputActionEvent_1(FKey Key);
    void InpActEvt_Gamepad_ChangeLockTarget_K2Node_InputActionEvent_0(FKey Key);
    void ClearReferencesUnload();
    void Close Emote UI();
    void Force Close Emote UI();
    void ReturnPlayer();
    void ScreenCam();
    void AllowScreenShots();
    void BlockScreenShots();
    void ReturnTrace02(FVector Location, bool Hit);
    void ReceiveCamTraceHandler02(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void VoidMakerCamMode(bool bIsThumbnailMode, FTransform SpawnTransform, FTransform CameraTransform);
    void ReturnVoidMakerEditor(bool Capture, FTransform NewTransform);
    void Submit(FString String);
    void UnPause(int32 SelectedItem, TEnumAsByte<Tabs::Type> Tab, int32 SettingsMainSelectionIndex, int32 SettingsActiveTab, int32 SettingsGameSelectionIndex, int32 SettingsGraphicsSelectionIndex, int32 InventoryTab, int32 SelectedKeyItem, int32 SelectedSword, int32 SelectedAmulet, int32 SelectedWeapon, int32 SelectedTunic, int32 JournalTab, int32 SelectedGodStone, int32 SelectedAchievement, int32 SelectedQuestIndex, int32 CurrentScreenInCategory, int32 Selected Void);
    void OpenSpiritMenu();
    void RemoveMap();
    void UnpauseRegainInput(bool NoReturnInput, bool UnfreezeEnemies);
    void ReturnPauseCam();
    void EquipItem(bool Right);
    void SetMoveInputTimer(TEnumAsByte<Directions::Type> Index);
    void ClearSetMoveInputTimer();
    void RightKey();
    void LeftKey();
    void SetMove();
    void DropItem();
    void ReceiveTick(float DeltaSeconds);
    void ResetCam();
    void ReceiveBeginPlay();
    void GetAllLockActors();
    void SetNpcTalk(float NPCTalkDistance, bool NPCTalk);
    void ShowLock();
    void HideLock();
    void ManualControl();
    void LockCameraAdjust();
    void AdjustCamDistanceAndFov();
    void GetClosestTarget();
    void CreateLockWidget();
    void LockBlurOn();
    void LockBlurOff();
    void UpdateLockBlur();
    void ShowLockHint();
    void HideLockHint();
    void CreateLockHint();
    void UpdateLockHint();
    void LockOn();
    void LockOff();
    void RefreshTarget();
    void ChangeCamDistanceOffset(bool Reset, float Offset, bool Master);
    void SpellTargetsGet();
    void LockSnap();
    void AddLockCamOffset();
    void ResetSide();
    void Checkifhittargetbelow();
    void ModifierOn();
    void ModifierOff();
    void SwapTarget();
    void ResetSwaPTargetList();
    void Set Locks Visibility(bool Visible);
    void CallInputOn();
    void CallInputOff();
    void RefreshLockedToEnemy();
    void Get All Lock Actor Toggle(bool Active);
    void Get Closest Target Toggle(bool Active);
    void Ticks Toggle(bool Active);
    void OpenTargetLogic();
    void CloseTargetLogic();
    void UpdateEnemyComponent();
    void ReceiveCamHandler01(bool HitA, bool HitB);
    void ExecuteUbergraph_Player_Camera_Control(int32 EntryPoint);
    void VMPauseMenu__DelegateSignature(bool bEnterPause);
    void VoidMakerScreenShotTaken__DelegateSignature(bool Taken, FTransform RecorderCamTransform);
    void SpecialPause__DelegateSignature();
    void Emote__DelegateSignature(TEnumAsByte<E_Emotes::Type> NewParam);
    void InputOff__DelegateSignature();
    void InputOn__DelegateSignature();
    void ExitPause__DelegateSignature();
};

#endif
