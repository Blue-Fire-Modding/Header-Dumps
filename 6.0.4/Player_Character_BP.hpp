#ifndef UE4SS_SDK_Player_Character_BP_HPP
#define UE4SS_SDK_Player_Character_BP_HPP

class APlayer_Character_BP_C : public ACharacter
{
    FPointerToUberGraphFrame UberGraphFrame;
    class USphereComponent* GoldenLustArea;
    class UAkComponent* AkSword3Ground;
    class UAkComponent* AkSword3Air;
    class UAkComponent* AkSword2;
    class UAkComponent* AkSword;
    class UAkComponent* AkMUSIC;
    class UStaticMeshComponent* ShadowVengeace;
    class UParticleSystemComponent* P_Ladder;
    class UParticleSystemComponent* P_Fall;
    class UParticleSystemComponent* P_ConsumeEssence;
    class UArrowComponent* Arrow2;
    class UParticleSystemComponent* FireBallCast;
    class UParticleSystemComponent* FireBall;
    class UParticleSystemComponent* SpinAttackCharge;
    class UForceFeedbackComponent* GlobalForceFeedback;
    class UParticleSystemComponent* FireSmoke;
    class UBoxComponent* DashAttackAmulet;
    class URadialForceComponent* RadialForce;
    class UForceFeedbackComponent* ForceFeedback;
    class UStaticMeshComponent* Hair_SM;
    class UPawnNoiseEmitterComponent* PawnNoiseEmitter;
    class UStaticMeshComponent* IdleSword_L;
    class UStaticMeshComponent* Sword_R;
    class UStaticMeshComponent* Sword_L;
    class UStaticMeshComponent* IdleSword_R;
    class UStaticMeshComponent* Mask;
    class UPointLightComponent* SelfLight;
    class USpringArmComponent* SpringArm;
    class USpringArmComponent* SpringArm1;
    class UCameraComponent* Camera-deprecated;
    float DoubleDashChargeTimeline_Float_CD6649F948CBBE90B4141B89A50042D5;
    TEnumAsByte<ETimelineDirection::Type> DoubleDashChargeTimeline__Direction_CD6649F948CBBE90B4141B89A50042D5;
    class UTimelineComponent* DoubleDashChargeTimeline;
    float TrimpleJumpRechargeTimeline_Float_4047D42649C532A9F3990F879B0F73A2;
    TEnumAsByte<ETimelineDirection::Type> TrimpleJumpRechargeTimeline__Direction_4047D42649C532A9F3990F879B0F73A2;
    class UTimelineComponent* TrimpleJumpRechargeTimeline;
    float MoveBackwards_Alpha_801C61464C1C5584CE680EB697E5D99E;
    TEnumAsByte<ETimelineDirection::Type> MoveBackwards__Direction_801C61464C1C5584CE680EB697E5D99E;
    class UTimelineComponent* MoveBackwards;
    float FireEssenceFlash_Flash_8C1BC5214F5D959F592C369B42CF035E;
    TEnumAsByte<ETimelineDirection::Type> FireEssenceFlash__Direction_8C1BC5214F5D959F592C369B42CF035E;
    class UTimelineComponent* FireEssenceFlash;
    float SpiritHolderLens_Alpha_919A64B04BF617006D16329A4D76AD42;
    TEnumAsByte<ETimelineDirection::Type> SpiritHolderLens__Direction_919A64B04BF617006D16329A4D76AD42;
    class UTimelineComponent* SpiritHolderLens;
    float BackTeleport_Alpha_7F471402443BC498F6820293239166AB;
    TEnumAsByte<ETimelineDirection::Type> BackTeleport__Direction_7F471402443BC498F6820293239166AB;
    class UTimelineComponent* BackTeleport;
    float MoveToHook_Alpha_17379C8E4F9C20A243E87FB3DA78F177;
    TEnumAsByte<ETimelineDirection::Type> MoveToHook__Direction_17379C8E4F9C20A243E87FB3DA78F177;
    class UTimelineComponent* MoveToHook;
    float SpellLight_Light_B741A08647FBD68B57B6F7B3AEB1E428;
    TEnumAsByte<ETimelineDirection::Type> SpellLight__Direction_B741A08647FBD68B57B6F7B3AEB1E428;
    class UTimelineComponent* SpellLight;
    float ClothesSpellLight_Float_F0E1A4894B32AD982943778C2B8CA3F0;
    TEnumAsByte<ETimelineDirection::Type> ClothesSpellLight__Direction_F0E1A4894B32AD982943778C2B8CA3F0;
    class UTimelineComponent* ClothesSpellLight;
    FVector CamAimMove_Movement_85CAF36C4B53029E5ACAA38DD35B6782;
    TEnumAsByte<ETimelineDirection::Type> CamAimMove__Direction_85CAF36C4B53029E5ACAA38DD35B6782;
    class UTimelineComponent* CamAimMove;
    float Timeline_4_Flash_4ADF80324480FC4FAA5BBCBC09BAD069;
    TEnumAsByte<ETimelineDirection::Type> Timeline_4__Direction_4ADF80324480FC4FAA5BBCBC09BAD069;
    class UTimelineComponent* Timeline_4;
    float Timeline_0_Flash_EF6C720D49B0DA567942DC947134F875;
    TEnumAsByte<ETimelineDirection::Type> Timeline_0__Direction_EF6C720D49B0DA567942DC947134F875;
    class UTimelineComponent* Timeline_0;
    float RageUpdate_Lerp_232FF15A4DFC919094E2AF8A0383CF86;
    TEnumAsByte<ETimelineDirection::Type> RageUpdate__Direction_232FF15A4DFC919094E2AF8A0383CF86;
    class UTimelineComponent* RageUpdate;
    float RadialIntro_Blur_9AA6EF5B4C4790372865B5827C65BDBD;
    TEnumAsByte<ETimelineDirection::Type> RadialIntro__Direction_9AA6EF5B4C4790372865B5827C65BDBD;
    class UTimelineComponent* RadialIntro;
    float RadialBlurFlash_Blur_98ECC5974E9FBCBD496E56849D2E74E4;
    TEnumAsByte<ETimelineDirection::Type> RadialBlurFlash__Direction_98ECC5974E9FBCBD496E56849D2E74E4;
    class UTimelineComponent* RadialBlurFlash;
    float SwordPutBack_Glow_B3E347214399106F81A3C89AF11CD483;
    TEnumAsByte<ETimelineDirection::Type> SwordPutBack__Direction_B3E347214399106F81A3C89AF11CD483;
    class UTimelineComponent* SwordPutBack;
    float AirControlDefault;
    bool WallSlide;
    float Speed;
    FVector Horizontal Velocity;
    FVector Control Stick Direction;
    float Control Stick YAW Spins;
    float Jump Regular Z;
    float Jump Wall Stick Force;
    bool Is Spin Capturing;
    bool Spin Capturing Clockwise;
    FRotator Control Stick Direction Previous;
    FRotator Control Stick Direction Previous Previous;
    float Control Stick Intensity;
    bool Control Stick is Tilted;
    bool 180Turn;
    bool Control Stick Clockwise;
    int32 Control Stick Fix Frame Count;
    int32 Control Stick Clockwise Fix Frame Count;
    float New Target Arm Lenght;
    float SpinJumpRequiredSpin;
    FVector InitialLocation;
    float CameraYaw;
    FVector WallMoveNormal;
    float Def_WalkSpeed;
    class UCurveFloat* MovementInputCurve;
    float Def_Gravity_Scale;
    FRotator Control Stick Soumersault Dir;
    float GlobalJumpRegulator;
    int32 AirSpinCount;
    bool NoMovement;
    class UCurveFloat* VJoystickSwimCurveLerp;
    float Def_MaxAcceleration;
    class UCurveFloat* VFixCamCurve;
    float CamY;
    float CamX;
    class APlayer_Camera_Control_C* CamControl;
    class ACheckPoint_C* CheckPoint;
    bool CameraRuled;
    class AActor* CamRuledActor;
    bool OnGround;
    class AActor* CameraCapture;
    class AGlobal_Controller_C* GlobalController;
    bool SplipperyFloor;
    class AShadowDecal_C* ShadowDecal;
    class ACheckPoint_C* CheckPointSecret;
    bool InChallenge;
    FPlayer_Character_BP_CDie Die;
    void Die();
    float LocalRightTYAxis;
    float LocalRightTXAxis;
    bool Run;
    int32 AttackAirCount;
    int32 AttackAirCountSimple;
    int32 AirDashCount;
    class UMaterialInstanceDynamic* Face_Mat;
    class UMaterialInstanceDynamic* Clothes_Mat;
    bool JumpDoubleClick;
    bool CamLock;
    class UHUD_C* Hud2;
    bool FastMoveCheck;
    bool FastMoveOn;
    FVector FastMoveVector;
    bool Dashing;
    bool BashMove;
    bool DoubleJumpUp;
    float PrevControlStickIntensity;
    float BashAirTime;
    bool FastStickPress;
    bool Dashed;
    bool StrongAttack;
    bool StaminaRecoverBlock;
    bool BashLockTarget;
    bool DownwardsAttack;
    float StaminaSpeedRecover;
    FVector BashLocation;
    float AttackHold;
    int32 AttackAnim;
    bool Attacking;
    class UBlueFire_Game_Instance_C* GameInstance;
    int32 AttackN;
    float Bash2Distance;
    class AActor* Bash2Target;
    FVector HitLoc;
    bool Grinding;
    TArray<float> PointDistance;
    float RailDistanceAlongSpline;
    int32 RailClosestPoint;
    float RailPointDistanceActor;
    float RailSpeed;
    bool GrindForward;
    float RailSecondPointDistanceFromActor;
    int32 RailSecondClosestPoint;
    FPlayer_Character_BP_CAttackDispatcher AttackDispatcher;
    void AttackDispatcher();
    FRotator InitialRotation;
    FVector LightVector;
    FVector HeadRotation;
    float HeadRot;
    class AActor* HeadRotPOI;
    float HeadRotBody;
    bool Running;
    bool Modifier;
    float SpeedCap;
    class UMaterialInstanceDynamic* Body_Mat;
    FVector LastSafeSpot;
    class UMaterialInstanceDynamic* Sword_Mat;
    TEnumAsByte<EPhysicalSurface> Surface;
    float Rage;
    float DisplayRage;
    float TempRage;
    bool DashRage;
    bool Dead;
    TArray<class AActor*> ResetActors;
    bool SimCam;
    FPlayer_Character_BP_CFall Fall;
    void Fall();
    TEnumAsByte<Items::Type> ItemToUse;
    bool Input;
    bool InVoid;
    FTransform VoidGateLocation;
    FPlayer_Character_BP_CLand Land;
    void Land();
    bool SpellMove;
    float SpellAirTime;
    bool WalkSpeedOverride;
    float SpellDistance;
    bool FloorSmashHit;
    class APlayer_AttackWave_C* AttackWave;
    bool DownSlam;
    float SprintSpeed;
    bool DodgeCounter;
    bool SpellAim;
    bool StraightJump;
    FVector CamCenter;
    FRotator InitialTargetRot;
    bool SpellCharge;
    bool DashFixDireLock;
    bool HitLaunched;
    bool HitLaunchBack;
    bool GettingUp;
    bool HitStun;
    class UMaterialInstanceDynamic* BodMat;
    FVector CenterCenterPoint;
    bool CamOffset;
    bool Fixed;
    bool WasFixed;
    class AActor* DashTarget;
    bool DashToTarget;
    FVector PreviousWallNormal;
    bool FallingDown;
    float FallTime;
    bool HardFall;
    float FixTime;
    bool SpellCoolDown;
    class UObject* SpellChargeSystem;
    bool DashJump;
    FVector SpellDamageLocation;
    class AActor* ActionActor;
    FPlayer_Character_BP_CActionActorNext ActionActorNext;
    void ActionActorNext();
    TArray<class AActor*> ActionActorList;
    float ActionActorDistance;
    bool GetUpQuick;
    FTransform VoidLocation;
    bool JustPressedJumpFix;
    int32 PreVoidHealth;
    bool VoidRestore;
    bool SuccessVoidExit;
    class ULoadScreen_C* LoadScreen;
    TArray<TEnumAsByte<Items::Type>> DeathItemsArray;
    FVector DeathSpawnPoint;
    class UMaterialInstanceDynamic* HairMat;
    float WeaponAttack;
    bool EF_FarasGrace;
    bool EF_HammerKing;
    bool EF_HolyCentry;
    bool EF_RiverSpirit;
    bool EF_AngryAmbusher;
    bool EF_SecretFruit;
    bool EF_MindController;
    bool EF_FrozenSoul;
    bool EF_HowlingTree;
    bool EF_LoveFlower;
    bool EF_StormCentry;
    bool EF_BloodPhantom;
    float OriginalGravityScale;
    float OriginalMaxWalkSpeed;
    float OriginalAirControl;
    float OriginalMaxAcceleration;
    float PlayerSpeedBoost;
    bool ParryShielded;
    bool ShieldSpotDefense;
    bool Recharging;
    float CamLerpSpeed;
    bool DownTouch;
    bool TempDownCheck;
    bool PogoTargetBelow;
    FVector LastSafeSpotDirection;
    bool SafeSpotSameDir;
    float ShadowTraceLocation;
    FPlayer_Character_BP_CFrameFreezeCall FrameFreezeCall;
    void FrameFreezeCall();
    FVector OriginalHookStartLocation;
    bool TeleportBehind;
    class AEnemy_Character_Parent_C* UpperRiseLastEnemy;
    class AEnemy_Character_Parent_C* DownFallEnemy;
    bool IsMegaBlast;
    class AEnemy_Character_Parent_C* MegaBlastEnemyRef;
    bool AttackBuffered;
    bool IsAerialRise;
    float DistanceToFloor;
    bool NoHardFall;
    bool CanShield;
    int32 ConsecutiveHits;
    bool HitSpecialOn;
    bool SpinAttacked;
    bool UsedSpecial;
    bool IsInElevator;
    bool ParryOn;
    bool ParryAttackPlus;
    bool AerialAttackAnim;
    bool WallSlideMove;
    bool FallDownDeactivate;
    FPlayer_Character_BP_CWallSlideCall WallSlideCall;
    void WallSlideCall();
    bool Bubbled;
    FVector WallRunLocation;
    float WeaponMovementSpeed;
    float WeaponRange;
    float WeaponBounceHeight;
    float WeaponRecoveryTime;
    bool IsInSpiritChange;
    TEnumAsByte<Tunics::Type> Tunic;
    TEnumAsByte<Weapons::Type> Weapon;
    FPlayer_Character_BP_CDownSmash DownSmash;
    void DownSmash();
    bool SpiritHolderOn;
    FPlayer_Character_BP_CSpiritHolderActivate SpiritHolderActivate;
    void SpiritHolderActivate();
    FPlayer_Character_BP_CSpiritHolderDeactivate SpiritHolderDeactivate;
    void SpiritHolderDeactivate();
    bool TripleJump;
    bool EF_PossesedBook;
    bool EF_ForestGuardian;
    bool EF_MoiTheDreadfull;
    bool EF_StoneHunter;
    bool EF_GoldenLust;
    bool EF_SpringWarrior;
    bool EF_OnopSiblings;
    bool EF_OnopCandle;
    bool EF_StoneWarrior;
    bool EF_ToxicRat;
    bool EF_SummonedGod;
    bool EF_SummoningHand;
    bool EF_BettingHand;
    bool EF_LifeSteal;
    bool EF_ShadowDemon;
    bool EF_ShadowGru;
    bool EF_FlyingOnop;
    bool EF_ToxicWater;
    bool DoubleDash;
    int32 ExtraLifes;
    bool HoverPlatformShow;
    bool EFAwakenedGod;
    FPlayer_Character_BP_CSpinAttackCall SpinAttackCall;
    void SpinAttackCall();
    FPlayer_Character_BP_CShieldCall ShieldCall;
    void ShieldCall();
    FPlayer_Character_BP_CJumpCall JumpCall;
    void JumpCall();
    FPlayer_Character_BP_CDoubleJumpCall DoubleJumpCall;
    void DoubleJumpCall();
    FPlayer_Character_BP_CVerticalAttackCall VerticalAttackCall;
    void VerticalAttackCall();
    FPlayer_Character_BP_CAttackCall AttackCall;
    void AttackCall();
    FPlayer_Character_BP_COpenWeaponMenu OpenWeaponMenu;
    void OpenWeaponMenu();
    FPlayer_Character_BP_CDashCall DashCall;
    void DashCall();
    FPlayer_Character_BP_CFireballCall FireballCall;
    void FireballCall();
    bool AbyssPotion;
    bool ShadowPotion;
    bool CarrotPotion;
    float ExtraDamage;
    int32 ExtraDamageHits;
    int32 Pouch;
    bool SpiritSwapDebug;
    float IceRTPC;
    float IKAdjustOffset;
    class UPlayer_AnimBP_C* AnimBP;
    float LeftFootOffset;
    float RightFootOffset;
    float IKTraceDistance;
    FName IKLeftSocket;
    FName IKRightSocket;
    float HipsOffset;
    float IKFeetInterpSpeed;
    bool ShieldOn;
    FVector FloorLocation;
    bool Climbing;
    int32 StatAttack;
    float StatDefense;
    float StatJump;
    float StatSpeed;
    float StatDash;
    float StatAirAttack;
    float StatAttackSpeed;
    class AInteractionMaster_C* CurrentVoidGate;
    FPlayer_Character_BP_CQuestProgress QuestProgress;
    void QuestProgress(int32 Amount, TEnumAsByte<E_DailyQuest::Type> Quest);
    class UExtraInput_UI_C* WallRunUI;
    FVector TargetDashDestination;
    bool ReachedTargetDash;
    FPlayer_Character_BP_CLockCam LockCam;
    void LockCam();
    TEnumAsByte<E_SwordSelection::Type> Last Sword Selection;
    FPlayer_Character_BP_CRestoreHealth RestoreHealth;
    void RestoreHealth();
    bool Breath;
    bool GunAim;
    class AActor* HitTargetAutoRot;
    float CamVOffset;
    bool Ref;
    class UWallRunStamina_C* WallRunStamina;
    float WallRunStaminaFloat;
    TArray<class UWidget*> WidgetsToKill;
    bool HolyBlessing;
    bool BlackFire;
    bool WallGrab;
    FVector CurrentListenerLocation;
    FRotator CurrentListenerRotation;
    FPlayer_Character_BP_CWarpCall WarpCall;
    void WarpCall();
    float TargetYaw;
    bool Healing;
    bool WallSlideBlock;
    FPlayer_Character_BP_CInputOn InputOn;
    void InputOn();
    FPlayer_Character_BP_CInputOff InputOff;
    void InputOff();
    FVector PrevLocationTimed;
    FPlayer_Character_BP_CVoidOpenFirst VoidOpenFirst;
    void VoidOpenFirst();
    FPlayer_Character_BP_CRestartPlayer RestartPlayer;
    void RestartPlayer();
    bool Cutscene;
    float X;
    float Y;
    float Sum;
    float Length;
    class UCurveFloat* MovementCurve;
    bool IsPlayingMontage;
    FPlayer_Character_BP_CCancel Cancel;
    void Cancel();
    FPlayer_Character_BP_CVoidExit VoidExit;
    void VoidExit();
    FPlayer_Character_BP_CVoidEnter VoidEnter;
    void VoidEnter();
    bool IsTeleporting;
    FTransform VoidLocation_0;
    FTransform DestinationTransform;
    FPlayer_Character_BP_CTriggerCutscene TriggerCutscene;
    void TriggerCutscene();
    bool DetectingWallSlide;
    float PrintDuration;
    FPlayer_Character_BP_CFluteOnopTempo FluteOnopTempo;
    void FluteOnopTempo();
    bool BlockWarp;
    TArray<FName> SafeSpotVisibleLevels;
    TArray<FName> SafeSpotHideLevels;
    bool WallGrabJump;
    FPlayer_Character_BP_CFallWaterDeath FallWaterDeath;
    void FallWaterDeath();
    FVector LastLandLocation;
    FPlayer_Character_BP_CTakeHit TakeHit;
    void TakeHit();
    bool Interacting;
    FPlayer_Character_BP_CInteract Interact;
    void Interact();
    TEnumAsByte<EPhysicalSurface> Last Surface;
    FPlayer_Character_BP_CMusicIntroGlass MusicIntroGlass;
    void MusicIntroGlass();
    bool FPS;
    bool ChargingSpinAttack;
    bool Vibration;
    bool RespawnInTemple;
    bool LastTimeRefreshWasShaking;
    bool IsGameOverDeath;
    bool JustWallGrabbed;
    bool DashStartFromBottom;
    int32 WwiseCallbackSwitch;
    FPlayer_Character_BP_CFluteOnopTempoSecond FluteOnopTempoSecond;
    void FluteOnopTempoSecond();
    class UCounter_C* CounterUI;
    FPlayer_Character_BP_CUpdateCounter UpdateCounter;
    void UpdateCounter();
    bool UpdateCounterSuccess;
    float EnemyLockOffset;
    class ABP_PlayerGhost_C* Player Ghost;
    bool Interacting With;
    bool Warping;
    bool HasEnemyAttached;
    FVector GhostLocation;
    FVector GhostBlockLocation;
    bool GhostBlocked;
    bool IsFinalCombat;
    int32 AttackN_Air;
    TEnumAsByte<PlayerState::Type> State;
    class UStaticMeshComponent* IceMesh;
    float SpellPower;
    FVector MoveBackOriginal;
    FVector MoveBackDire;
    float EnemyCamZOffset;
    bool SpinAttackMana;
    bool Emoting;
    int32 SoundSword;
    bool HoverPlatformOn;
    int32 TempAttackDire;
    class AMusic_Trigger_Enter_Exit_2_C* SafeSpotMusicTrigger;
    int32 SpellLoop;
    int32 StopSpellLoop;
    bool ScreenShot;
    FPlayer_Character_BP_CVibrateStop VibrateStop;
    void VibrateStop();
    class USpeedTimer_C* SpeedTimer;
    class UVoidExit_C* VoidExitUI;
    TArray<class AActor*> ResetActorsRun;
    class USceneComponent* POIComponent;
    FVector HeadPOILocation;
    class AActor* TargetDashRef;
    class UDeathHud_C* DeathHud;
    class AAllVoids_Controller_C* AllVoidsController;
    class AHoverPlatform_C* NewVar_0;
    class AShield_Bp_C* ShieldActor;
    class UForceFeedbackComponent* TempForceFeedback;
    class UParticleSystemComponent* SprintVFX;
    class UParticleSystemComponent* WallRunVFX;
    class UParticleSystemComponent* ShieldVFX;
    FHitResult HitWallJump1;
    bool ParryshieldedBack;
    class AActor* HitActorWallRun;
    FVector TempPoint;
    FVector ImpactPointTemp;
    TEnumAsByte<EPhysicalSurface> SurfaceB;
    TEnumAsByte<EPhysicalSurface> SurfaceA;
    TEnumAsByte<EPhysicalSurface> SurfaceC;
    TEnumAsByte<EPhysicalSurface> SurfaceD;
    TEnumAsByte<EPhysicalSurface> SurfaceE;
    class ATraceHandler_C* TraceHandlerReference;
    float DistanceIKTemp;
    FName SocketIKTemp;
    bool ValidHitIKTemp;
    float TempFIK;
    FVector TempVIK;
    FVector CapsuleHitImpactPoint;
    FVector CapsuleHitNormal;
    FVector CapsuleHitImpactNormal;
    bool WallRunDetectComplex;
    bool VoidMaster;
    bool EmoteBlocked;
    int32 CallbackInt;
    FPlayer_Character_BP_CTimerVoidWarning TimerVoidWarning;
    void TimerVoidWarning();
    class AActor* HolyGodstoneHandler;
    bool DeathRelocateSkip;
    bool IsInVoidMaker;
    FTransform VoidMakerRespawn;
    bool HitGateClosed;
    bool UseVoidBlades;
    int32 VoidMasterIndex;
    float JumpHeightDebug;
    bool ExternalOverrideAudioListener;
    bool VoidMakerBuildMode;
    FTransform VoidMakerRespawnOriginal;
    class AActor* LandHitActor;
    class UPrimitiveComponent* LandHitComponent;
    FVector LandLocation;
    FVector LandImpactPoint;
    FPlayer_Character_BP_COnDieBound OnDieBound;
    void OnDieBound();
    FString VoidName;
    bool PHOn;
    float TripleJumpCharge;
    float DoubleDashCharge;
    FPlayer_Character_BP_CSpiritRecharge SpiritRecharge;
    void SpiritRecharge(TEnumAsByte<Spirits::Type> Spirit, bool Use);
    bool TempDoubleDash;
    FPlayer_Character_BP_CVoidDeath VoidDeath;
    void VoidDeath();
    FPlayer_Character_BP_CGA VoidExit GA VoidExit;
    void GA VoidExit(bool Won);
    bool bInDamageCooldown;
    float BaseSpinAttack;
    float MoiSpiritSpinAttackMultiplier;
    float PossesedBookSpinAttackAdd;
    bool AttackDashHintWindow;
    FPostProcessSettings OriginalPPSettings;
    FPlayer_Character_BP_COnRespawnToSafePoint OnRespawnToSafePoint;
    void OnRespawnToSafePoint();
    float VFX Flash Value;
    bool VFX Flash Activated;
    FTimerHandle SwordThrowTraceTimer;
    int32 VoidMakerDeaths;
    FPlayer_Character_BP_COnRemovePickupUI OnRemovePickupUI;
    void OnRemovePickupUI(bool bRemove);
    bool VoidMakerResetting;
    FPlayer_Character_BP_CVM_Die VM_Die;
    void VM_Die();
    bool bIsPossessed;
    bool bCanFreeze;
    class UPrimitiveComponent* HitComponentWallRun;
    FPlayer_Character_BP_COnStartPlayModeVM OnStartPlayModeVM;
    void OnStartPlayModeVM(bool Start);
    bool TimerDeath;
    bool ResetTimerDash;
    bool Reset Timer TripleJump;

    void GetPouchInfo(int32& Current Limit, int32& Max Limit);
    void NormalToRotator(FVector Normal, FRotator& Rotation);
    void IKUpdateFootRotation(FRotator TargetVal, FRotator RotV, float InterpSpeed, FRotator& Rotator);
    void IKUpdateFootOffset(float TargetVal, float EffectorVal, float IntSpeed, float& OutOffset);
    void ResetAirFriction();
    void ResetGravity();
    void JumpLenght(TEnumAsByte<Jumps::Type> Jump, float& Out);
    void Get4GlobalRotationNearest(float Yaw, float& YawOut);
    void JumpIntensity(TEnumAsByte<Jumps::Type> Jump, float& Out);
    void UserConstructionScript();
    void SpiritHolderLens__FinishedFunc();
    void SpiritHolderLens__UpdateFunc();
    void MoveBackwards__FinishedFunc();
    void MoveBackwards__UpdateFunc();
    void CamAimMove__FinishedFunc();
    void CamAimMove__UpdateFunc();
    void ClothesSpellLight__FinishedFunc();
    void ClothesSpellLight__UpdateFunc();
    void SpellLight__FinishedFunc();
    void SpellLight__UpdateFunc();
    void RageUpdate__FinishedFunc();
    void RageUpdate__UpdateFunc();
    void MoveToHook__FinishedFunc();
    void MoveToHook__UpdateFunc();
    void BackTeleport__FinishedFunc();
    void BackTeleport__UpdateFunc();
    void RadialBlurFlash__FinishedFunc();
    void RadialBlurFlash__UpdateFunc();
    void RadialIntro__FinishedFunc();
    void RadialIntro__UpdateFunc();
    void DoubleDashChargeTimeline__FinishedFunc();
    void DoubleDashChargeTimeline__UpdateFunc();
    void FireEssenceFlash__FinishedFunc();
    void FireEssenceFlash__UpdateFunc();
    void Timeline_0__FinishedFunc();
    void Timeline_0__UpdateFunc();
    void Timeline_4__FinishedFunc();
    void Timeline_4__UpdateFunc();
    void TrimpleJumpRechargeTimeline__FinishedFunc();
    void TrimpleJumpRechargeTimeline__UpdateFunc();
    void SwordPutBack__FinishedFunc();
    void SwordPutBack__UpdateFunc();
    void InpActEvt_Nine_K2Node_InputKeyEvent_0(FKey Key);
    void OnNotifyEnd_B2E126534D04B9FD883581A50DE65FBF(FName NotifyName);
    void OnNotifyBegin_B2E126534D04B9FD883581A50DE65FBF(FName NotifyName);
    void OnInterrupted_B2E126534D04B9FD883581A50DE65FBF(FName NotifyName);
    void OnBlendOut_B2E126534D04B9FD883581A50DE65FBF(FName NotifyName);
    void OnCompleted_B2E126534D04B9FD883581A50DE65FBF(FName NotifyName);
    void OnNotifyEnd_E6A0521B404072AA3B148AAD82887D20(FName NotifyName);
    void OnNotifyBegin_E6A0521B404072AA3B148AAD82887D20(FName NotifyName);
    void OnInterrupted_E6A0521B404072AA3B148AAD82887D20(FName NotifyName);
    void OnBlendOut_E6A0521B404072AA3B148AAD82887D20(FName NotifyName);
    void OnCompleted_E6A0521B404072AA3B148AAD82887D20(FName NotifyName);
    void InpActEvt_PC_Vertical_Attack_K2Node_InputActionEvent_30(FKey Key);
    void InpActEvt_PC_Vertical_Attack_K2Node_InputActionEvent_29(FKey Key);
    void InpActEvt_Gamepad_Vertical_Attack_K2Node_InputActionEvent_28(FKey Key);
    void InpActEvt_Gamepad_Vertical_Attack_K2Node_InputActionEvent_27(FKey Key);
    void OnNotifyEnd_79120F364C79DE79856FFB9415F25AD3(FName NotifyName);
    void OnNotifyBegin_79120F364C79DE79856FFB9415F25AD3(FName NotifyName);
    void OnInterrupted_79120F364C79DE79856FFB9415F25AD3(FName NotifyName);
    void OnBlendOut_79120F364C79DE79856FFB9415F25AD3(FName NotifyName);
    void OnCompleted_79120F364C79DE79856FFB9415F25AD3(FName NotifyName);
    void InpActEvt_Gamepad_Interact_Shield_K2Node_InputActionEvent_26(FKey Key);
    void InpActEvt_Gamepad_Interact_Shield_K2Node_InputActionEvent_25(FKey Key);
    void InpActEvt_PC_Shield_K2Node_InputActionEvent_24(FKey Key);
    void InpActEvt_PC_Shield_K2Node_InputActionEvent_23(FKey Key);
    void OnNotifyEnd_FA57F2F848484C8CD9F0DAB10A8BCC08(FName NotifyName);
    void OnNotifyBegin_FA57F2F848484C8CD9F0DAB10A8BCC08(FName NotifyName);
    void OnInterrupted_FA57F2F848484C8CD9F0DAB10A8BCC08(FName NotifyName);
    void OnBlendOut_FA57F2F848484C8CD9F0DAB10A8BCC08(FName NotifyName);
    void OnCompleted_FA57F2F848484C8CD9F0DAB10A8BCC08(FName NotifyName);
    void InpActEvt_PC_Dash_K2Node_InputActionEvent_22(FKey Key);
    void InpActEvt_PC_Dash_K2Node_InputActionEvent_21(FKey Key);
    void InpActEvt_Gamepad_Dash_K2Node_InputActionEvent_20(FKey Key);
    void InpActEvt_Gamepad_Dash_K2Node_InputActionEvent_19(FKey Key);
    void OnNotifyEnd_69C2E4E142DEBAC7089683828E4BFAA7(FName NotifyName);
    void OnNotifyBegin_69C2E4E142DEBAC7089683828E4BFAA7(FName NotifyName);
    void OnInterrupted_69C2E4E142DEBAC7089683828E4BFAA7(FName NotifyName);
    void OnBlendOut_69C2E4E142DEBAC7089683828E4BFAA7(FName NotifyName);
    void OnCompleted_69C2E4E142DEBAC7089683828E4BFAA7(FName NotifyName);
    void OnNotifyEnd_5F49E2864D79CA54596D84BE32AE583A(FName NotifyName);
    void OnNotifyBegin_5F49E2864D79CA54596D84BE32AE583A(FName NotifyName);
    void OnInterrupted_5F49E2864D79CA54596D84BE32AE583A(FName NotifyName);
    void OnBlendOut_5F49E2864D79CA54596D84BE32AE583A(FName NotifyName);
    void OnCompleted_5F49E2864D79CA54596D84BE32AE583A(FName NotifyName);
    void InpActEvt_PC_Horizontal_Attack_K2Node_InputActionEvent_18(FKey Key);
    void InpActEvt_PC_Horizontal_Attack_K2Node_InputActionEvent_17(FKey Key);
    void InpActEvt_Gamepad_Horizontal_Attack_K2Node_InputActionEvent_16(FKey Key);
    void InpActEvt_Gamepad_Horizontal_Attack_K2Node_InputActionEvent_15(FKey Key);
    void OnNotifyEnd_EE04C7614E69D21210DF509DA2B8DEA7(FName NotifyName);
    void OnNotifyBegin_EE04C7614E69D21210DF509DA2B8DEA7(FName NotifyName);
    void OnInterrupted_EE04C7614E69D21210DF509DA2B8DEA7(FName NotifyName);
    void OnBlendOut_EE04C7614E69D21210DF509DA2B8DEA7(FName NotifyName);
    void OnCompleted_EE04C7614E69D21210DF509DA2B8DEA7(FName NotifyName);
    void InpActEvt_Gamepad_Restore_Health_K2Node_InputActionEvent_14(FKey Key);
    void InpActEvt_PC_Restore_Health_K2Node_InputActionEvent_13(FKey Key);
    void OnNotifyEnd_0F4095274387344590F867A95EB62B7A(FName NotifyName);
    void OnNotifyBegin_0F4095274387344590F867A95EB62B7A(FName NotifyName);
    void OnInterrupted_0F4095274387344590F867A95EB62B7A(FName NotifyName);
    void OnBlendOut_0F4095274387344590F867A95EB62B7A(FName NotifyName);
    void OnCompleted_0F4095274387344590F867A95EB62B7A(FName NotifyName);
    void OnNotifyEnd_55A9E4D942BB6E226F3A34A73C65DBE9(FName NotifyName);
    void OnNotifyBegin_55A9E4D942BB6E226F3A34A73C65DBE9(FName NotifyName);
    void OnInterrupted_55A9E4D942BB6E226F3A34A73C65DBE9(FName NotifyName);
    void OnBlendOut_55A9E4D942BB6E226F3A34A73C65DBE9(FName NotifyName);
    void OnCompleted_55A9E4D942BB6E226F3A34A73C65DBE9(FName NotifyName);
    void InpActEvt_Generic_Down_K2Node_InputActionEvent_12(FKey Key);
    void OnNotifyEnd_2F4BB1744FB6A25311BD58997A02B3E5(FName NotifyName);
    void OnNotifyBegin_2F4BB1744FB6A25311BD58997A02B3E5(FName NotifyName);
    void OnInterrupted_2F4BB1744FB6A25311BD58997A02B3E5(FName NotifyName);
    void OnBlendOut_2F4BB1744FB6A25311BD58997A02B3E5(FName NotifyName);
    void OnCompleted_2F4BB1744FB6A25311BD58997A02B3E5(FName NotifyName);
    void OnNotifyEnd_D04F630E44E9999B84A864A908C98308(FName NotifyName);
    void OnNotifyBegin_D04F630E44E9999B84A864A908C98308(FName NotifyName);
    void OnInterrupted_D04F630E44E9999B84A864A908C98308(FName NotifyName);
    void OnBlendOut_D04F630E44E9999B84A864A908C98308(FName NotifyName);
    void OnCompleted_D04F630E44E9999B84A864A908C98308(FName NotifyName);
    void OnNotifyEnd_3E2BC40D42FE8C2C1EDB2C90F8708519(FName NotifyName);
    void OnNotifyBegin_3E2BC40D42FE8C2C1EDB2C90F8708519(FName NotifyName);
    void OnInterrupted_3E2BC40D42FE8C2C1EDB2C90F8708519(FName NotifyName);
    void OnBlendOut_3E2BC40D42FE8C2C1EDB2C90F8708519(FName NotifyName);
    void OnCompleted_3E2BC40D42FE8C2C1EDB2C90F8708519(FName NotifyName);
    void InpActEvt_PC_Jump_K2Node_InputActionEvent_11(FKey Key);
    void InpActEvt_PC_Jump_K2Node_InputActionEvent_10(FKey Key);
    void InpActEvt_Gamepad_Jump_K2Node_InputActionEvent_9(FKey Key);
    void InpActEvt_Gamepad_Jump_K2Node_InputActionEvent_8(FKey Key);
    void InpActEvt_Gamepad_Sprint_K2Node_InputActionEvent_7(FKey Key);
    void InpActEvt_Gamepad_Sprint_K2Node_InputActionEvent_6(FKey Key);
    void InpActEvt_PC_Sprint_K2Node_InputActionEvent_5(FKey Key);
    void InpActEvt_PC_Sprint_K2Node_InputActionEvent_4(FKey Key);
    void InpActEvt_Gamepad_Lock_K2Node_InputActionEvent_3(FKey Key);
    void InpActEvt_Gamepad_Lock_K2Node_InputActionEvent_2(FKey Key);
    void InpActEvt_PC_Lock_K2Node_InputActionEvent_1(FKey Key);
    void InpActEvt_PC_Lock_K2Node_InputActionEvent_0(FKey Key);
    void Set All Stats();
    void Awake Umbra();
    void DebugHitResultLocation(FString Text);
    void DebugHitResultName(class UPhysicalMaterial* PhyMat);
    void SetXboxVibration();
    void Set Void Master(int32 Index);
    void Set QA VoidOfSorrows(class UBlueFire_Game_Instance_C* GameInstance);
    void ClimbStart(float ClimbSpeed);
    void ClimbRelease();
    void ForceClimbEnd();
    void Activate VFX(bool Enable);
    void UpdateIK();
    void IKTraceReplace(float InputPin, FName InputPin2, bool Left);
    void ReturnHandler10(bool Hit, FVector OutHitLocation, FVector OutHitTraceEnd);
    void ReceivePlayerHandler10(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ExitSpiritHolder();
    void SpiritHunterTick();
    void ForceFeedbackCall(TEnumAsByte<ForceFeedbackTypes::Type> Type, class UForceFeedbackEffect* ForceFeedbackEffect);
    void CancelOtherAttacks(bool CancelFallDown, bool IgnoreSpell);
    void RunSpinAttack();
    void SpinHitTrace();
    void ReceiveSpinAttackHandler(bool Hit, FVector Vector, const TArray<FHitResult>& HitResult);
    void AttackSpinCloseSwordHide();
    void MegaBlastAttack();
    void StopVibrate();
    void DownFallAttack();
    void CancelDownSlam(bool NoMovement);
    void UpperRise();
    void UpperRiseEnemyReset();
    void FrameFreeze(float Duration, float Timedilatation, class AActor* Target, bool Parry);
    void FrameFreezeCancel();
    void ParrySlowMo();
    void SkateStart();
    void SkateTick();
    void SkateCancel();
    void SkateRelease();
    void RechargeStart();
    void RechargeTick();
    void RechargeRelease();
    void RechargeCancel();
    void ResetStamina(float StaminaAmount);
    void ShieldPress();
    void ShieldRelease();
    void ShieldTick();
    void ResetShield();
    void TriggerShield();
    void ShieldParry();
    void ParryWindowOff();
    void PlayBounceBackShield(FVector AttackLocation);
    void StopMoveBackShield();
    void RefreshPlayer();
    void SetPlayerMesh(TEnumAsByte<Tunics::Type> Tunic);
    void RefreshMovement();
    void Vibrate(class UForceFeedbackEffect* NewForceFeedbackEffect);
    void LifeSteal();
    void ExitFPSCam();
    void LockUpdateCam();
    void RestartIdleShake();
    void ResetSparkTunic();
    void HUD Load Items();
    void VoidHealthSave();
    void VoidExitRestoreHealth();
    void Teleport to Void();
    void Check Void Location();
    void Unbindevents();
    void ActionUpdateCheck();
    void FixPlayer(class AActor* ParentActor);
    void Unfix();
    void FixedTick();
    void CamCenterOffset(class AActor* CamOtherActor);
    void ReturnCameraCenter();
    void FloorSmashEvent();
    void ResetLaunchSwordThrow();
    void SwordThrowTrace();
    void SpellCancel(bool KeepCharge);
    void SwordThrowReset();
    void ReleaseSpell();
    void ResetSwordThrowTimer();
    void SwordThrowTime();
    void SwordThrowCamLag(bool On, float LagSpeed, float LagRotSpeed);
    void ChargeSpell();
    void SpellCoolDownEv();
    void DeactivateSpellCharge();
    void SpellStartAim();
    void CamAimIn();
    void CamAimOut();
    void SpellCoolDownTimelineEv();
    void FakeSpellPressed();
    void FireImpulse(FVector Location);
    void SpellClothesLightStart();
    void SpellClothesLightEnd();
    void ChangeLight();
    void RevertLight();
    void ShootVFX(FVector Target);
    void ShootMontage();
    void Bullet();
    void Shoot();
    void Release();
    void StaminaBoost(float Boost);
    void SpellColor(bool Charged);
    void SpellDamage();
    void ReceiveHandler11(FVector ImpactPoint);
    void ReceiveHandler14(bool Hit);
    void StopSpellForce();
    void ReceivePlayerHandler14(bool HitA, bool HitB);
    void ReceivePlayerHandler11(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceiveSpellDamageHandler(bool Hit, FVector Vector, const TArray<FHitResult>& HitResult);
    void ResetRage();
    void ModifyRage(float B);
    void ModifierOn(bool On);
    void ChargeModifier(bool NormalCharge);
    void LoseModifier();
    void ResetLoseConsecutiveHits();
    void LoseModifierCall();
    void ModifierPress();
    void ModifierRelease();
    void Set HeadRot();
    void HeadRotTick();
    void GetHeadRotActors();
    void Emote Sword Selection(TEnumAsByte<E_SwordSelection::Type> Sword Selection);
    void Emote Play Anim(class UAnimMontage* Anim Montage);
    void SetCustomIdle(class UAnimSequenceBase* CustomIdle);
    void HoverPlatform();
    void BreakHoverPlat();
    void Reset Hover Platform();
    void ReceivePlayerHandler08();
    void GrindStart();
    void CheckRail();
    void GrindTick();
    void GrindEnd();
    void GrindPress();
    void GrindRelease();
    void Trace();
    void BashCancel();
    void BashReset();
    void ReleaseBash();
    void BashEnd();
    void GetCurrency(int32 Currency);
    void StopDash();
    void RepeatDash();
    void PlayRadialBlur();
    void RadialStart(float Intensity);
    void RadialEnd();
    void DashMoveToTargetTick();
    void DashMoveToTargetBegin();
    void DashMoveToTargetEnd();
    void EndDash();
    void ResetDashFreeze();
    void EndDashWhenMoving();
    void DashJumpReset();
    void DashFakePressed();
    void DashFakeRelease();
    void BndEvt__DashAttack_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
    void turnoffdashattack();
    void RestoreDoubleDashVM(bool ResetingTimer);
    void DashEndJump();
    void StopRadialBlur();
    void DashTick();
    void DashTickRun(FVector DashDirection, float Distance, bool Initial);
    void VFX Dash();
    void ClearDashTimers();
    void ReceiveTrace05(bool Hit, FVector Location, FVector ImpactNormal);
    void ReceivePlayerHandler06(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceivePlayerHandler07(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceivePlayerHandler19(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceivePlayerHandler05(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void DoubleDashChargeEv();
    void RestoreDoubleDash();
    void Force Reset Dash();
    void StopDashAttack();
    void ResetAttack();
    void AttackChargeHold();
    void StopDashAttackStrong();
    void ResetAttackAnim();
    void FinishAttack();
    void AutoAimNearEnemy();
    void SmashDownChangeWave();
    void AttackSwordHide();
    void AttackFakeInput();
    void AttackFakeInputDown();
    void AttackWaveDirect();
    void AttackBufferUse();
    void AttackBufferAbort(bool LoseSpinCharge);
    void StartSpinAttackCharge();
    void LoseSpinChargeEvent(FString inString);
    void StopAttackMontage();
    void RotToEnemy();
    void StopAttackWave();
    void StopCharge();
    void ResetAttackN();
    void AttackMovementRestore();
    void ResetIce();
    void IceBreak();
    void IceHardBreak();
    void AttackRootJump();
    void Ghost Block(bool bLock, FVector Block Location);
    void AddLife(int32 B, bool Full);
    void UseItem();
    void ItemAddLife(int32 B);
    void ItemNotAvailable();
    void DrinkAbyssPotion();
    void EndAbyssEffect();
    void CancelAllPotionEffects();
    void DrinkCarrotPotion();
    void EndCarrotEffect();
    void DrinkShadowPotion();
    void EndShadowEffect();
    void StrenghtPower(int32 Hits, float Boost);
    void EndStrenghtPower();
    void ReduceHit();
    void Consume VFX();
    void NewCheckPoint(class ACheckPoint_C* CheckPoint);
    void NewSecretCheckPoint(class ACheckPoint_C* CheckPoint);
    void Warp();
    void DamageCooldown();
    void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
    void InstaDeath(bool Spawn VFX, FVector VFX Location, bool Floor);
    void RemoveLife(float InputPin, bool PlayMontage, bool SkipStopMontage, bool Keep1, bool IsFall);
    void Restart();
    void CanDieAgain();
    void OpenHitGate();
    void CloseHitGate();
    void MovePlayerToCheckPoint();
    void HitLaunch(FVector Origin, float Multiplier XY, float Multiplier Z);
    void Replay();
    void ResetHitLaunch();
    void PlayHitDamageSound();
    void ParryDefense();
    void ParryAttackPlusEnd();
    void DamageFallReset();
    void DoneLoading();
    void DieEvent();
    void ExitFromVoid(bool Success, bool Sim, bool AddLife, bool CheckHolyGodstone);
    void RemovePauseIfExists();
    void ResetInstaDeath();
    void KillWidgets();
    void Resume AllVoids Cutscene();
    void DoneUnloadingDeath();
    void CustomEvent();
    void SetTunicVoid();
    void MusicCallback2(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
    void Clear Safe Spot Levels();
    void Respawn in Temple();
    void Force Exit Pause();
    void Ghost Spawn(bool Begin Play);
    void Freeze();
    void Void Load Screen(bool Show, bool AddLife);
    void Finish AllVoids();
    void DestroyReferences(bool DeathRelocateSkip);
    void Move Speed Timer to Top();
    void DeathResetLife();
    void VoidMakerAddDeath();
    void VoidMakerResetDeaths();
    void ReceivePossessed(class AController* NewController);
    void ReceiveUnpossessed(class AController* OldController);
    void UnlockMask();
    void SimPhy(bool Cam Follow, float InDamping, bool Water);
    void ResetPHY(bool CamReturn);
    void CheckHealthAmountSFX();
    void ClearHitLaunchRun();
    void HitLaunchRun();
    void AddHUD();
    void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void WallSlideCheck();
    void WallSlideCheckClear();
    void WallSlideCheckStart();
    void WallSlideReset(bool LoseGripDelay, bool Ladder);
    void CheckWallJumpNormal();
    void Wall Slide Trail();
    void Wall Slide Trail Off();
    void WallSlideLoseGrip();
    void WallRunGrav();
    void LoseGripDelay();
    void WallSlideResetReset();
    void UpdateSurface(TEnumAsByte<EPhysicalSurface> Surface);
    void WallSlideLoseGripStart();
    void WallSlideLoseInstantGrip();
    void RemoveWallSlideHUD(bool Instant);
    void DisableWallGrab();
    void ReleaseWallGrab();
    void SettingsWallGrabCancel();
    void WallSlideFallFaster();
    void WallSlideFallFasterEnd();
    void EndJustWallGrabbed();
    void Detect Other Collisions();
    void StopWallSlideVibrate();
    void CustomEvent_1(TEnumAsByte<EPhysicalSurface> Surface, FVector ImpactPoint, bool Hit);
    void ReceiveCustomTraceC(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    void ReceiveTraceD(TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    void ReceiveHandler15(bool Hit);
    void ReceiveHandler16();
    void ReceiveHandler18(FVector Location, FVector ImpactPoint, FVector ImpactNormal);
    void GrabKeepV();
    void ReceivePlayerHandler04(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceiveHandler04(FVector ImpactNormal);
    void ReceiveTraceHandlerC(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceiveTraceHandlerD(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceiveTraceHandlerB(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceivePlayerHandler15(bool HitA, bool HitB);
    void ReceivePlayerHandler16();
    void ReceivePlayerHandler18(bool HitA, bool HitB, bool HitC, FVector HitLocation, FVector HitImpactPoint, FVector HitImpactNormal);
    void ReceivePlayerHandler13();
    void ReceivePlayerHandler17(bool HitA, bool HitB);
    void ReceiveHandler17(bool Hit);
    void Change Screenshot Mode(bool bIsScreenShot);
    void OnLanded(const FHitResult& Hit);
    void ResetMoves(bool Reset1stJump, bool ResetSpinAttack);
    void GetUp();
    void QuickGetUp();
    void QuickGetUpCloseGate();
    void QuickGetUpOpenGate();
    void playgetupsound();
    void AbortGetUp();
    void ResetHitStun();
    void HandlerA(TEnumAsByte<EPhysicalSurface> Surface);
    void ReceiveTraceHandlerA(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void StopFlash();
    void PlayFlash();
    void HitFlash();
    void VFX Death(FVector Location);
    void VFX Jump();
    void VFX Wall Jump();
    void VFX Landing();
    void VFX Wall Slide(FRotator Rotation);
    void VFX Fall Landing();
    void VFX Double Jump();
    void VFX Wall Run(bool Enable);
    void VFX Wallrun Tick();
    void VFX Triple Jump();
    void Regular Jump();
    void CrouchJump();
    void JumpInput();
    void BackSoumersault();
    void LongJump();
    void AirHit();
    void ResetAirSpin();
    void WallJump(bool FireballLaunch);
    void DoubleJumpPush();
    void ClearDoubleJump();
    void ResetJump();
    void JumpRotEnd();
    void SideLaunch();
    void JumpEnd();
    void DodgeCounterEvent();
    void DodgeCounterReAttack();
    void JumpEndNoSwordRemove();
    void DodgeJumpCall();
    void JustPressedJump();
    void RestoreTripleJump();
    void JumpTraceDebug();
    void TripleJumpRecharge();
    void RestoreTripleJumpVM(bool Reseting Timer);
    void ClearReferencesLoad();
    void RefreshSpawnTraceHandler();
    void SpawnTraceHandler(bool Spawn);
    void CapMaxSpeed(float MaxWalkSpeed);
    void ResetWalkSpeedCap();
    void CapMinWalkSpeed(float MinWalkSpeed);
    void RunFX();
    void RunFXOff();
    void RunFXTick();
    void SpeedTimerControl(bool Block Timer, FString Origin);
    void NoiseMaker(float Loudness, bool OtherLocation, const FVector Location);
    void InstaStop(bool ResetMoves, bool Freeze, bool ReturnGravity, float ReturnGravityDelay, bool IgnoreFloorCheckForFreeze, bool NoMovement, bool MoveUp);
    void ReturnGravity(float Delay);
    void SpeedTimerToggle(class UBlueFire_Game_Instance_C* GameInstance);
    void WallReleaseCall();
    void ForceReturnGrav();
    void MovementTick();
    void Sprint(bool Enable);
    void InpAxisEvt_Generic_Motion_X_Axis_K2Node_InputAxisEvent_0(float AxisValue);
    void InpAxisEvt_Generic_Motion_Y_Axis_K2Node_InputAxisEvent_1(float AxisValue);
    void AttackAirCountReset();
    void UnlockCam();
    void CancelLock();
    void BlendToTarget();
    void LockFakePressed();
    void LockFakeRelease();
    void ReceiveBeginPlay();
    void OnWalkingOffLedge(const FVector& PreviousFloorImpactNormal, const FVector& PreviousFloorContactNormal, const FVector& PreviousLocation, float TimeDelta);
    void AirForgiveness();
    void ControlFastTapCheck();
    void ResetFastTap();
    void SwordShow();
    void SwordHide();
    void SwordRemove();
    void NoSword();
    void HasSword();
    void PlayerTick();
    void ReceiveTick(float DeltaSeconds);
    void FallTickCheck();
    void changertpcvalue(float B);
    void SwordHideExecute();
    void SpawnDecal();
    void FallDownStart();
    void FallDownCancel();
    void FallDownTimerTick();
    void HideEnd();
    void FallDownStop();
    void FallDownResume();
    void SlowTick(float Duration);
    void MusicCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
    void JumpShowSwordsIdleInstant();
    void CancelEvent();
    void SwordHideNoCancel();
    void OnReachedJumpApex_Event_0();
    void BindApex();
    void Master Music();
    void PlayerTickToggle(bool On);
    void FallDownCancelForce();
    void PlayerTickTickToggle(bool TickToggle);
    void ReceiveHandler01();
    void ReceiveHandler03(bool Hit);
    void ReceiveHandler12(bool Hit, FVector ImpactPoint, FVector ImpactNormal);
    void SpawnAssignGlobal();
    void ReceivePlayerHandler01(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceivePlayerHandler02(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceivePlayerHandler03(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceivePlayerHandler12(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void ReceiveCameraHandlerLogic(bool HitA, bool HitB);
    void CameraCloseGate();
    void General Fixes();
    void ResetCamTrace();
    void ReceivePlayerHandler09(bool Hit, FVector HitLocation, FVector HitImpactNormal, FVector TraceEnd);
    void Receive09(bool Hit);
    void CamVerticalOffset(bool Right, bool Reset);
    void CamZoom(bool Right, bool Reset);
    void ReceiveTraceHandlerF(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceiveTraceHandlerE(bool Hit, TEnumAsByte<EPhysicalSurface> SurfaceType, FVector Vector);
    void ReceiveHandlerF(FVector ImpactPoint, TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    void TraceHandlerEReceive(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    void Reset Surface Death();
    void ExecuteUbergraph_Player_Character_BP(int32 EntryPoint);
    void OnStartPlayModeVM__DelegateSignature(bool Start);
    void VM_Die__DelegateSignature();
    void OnRemovePickupUI__DelegateSignature(bool bRemove);
    void OnRespawnToSafePoint__DelegateSignature();
    void GA VoidExit__DelegateSignature(bool Won);
    void VoidDeath__DelegateSignature();
    void SpiritRecharge__DelegateSignature(TEnumAsByte<Spirits::Type> Spirit, bool Use);
    void OnDieBound__DelegateSignature();
    void TimerVoidWarning__DelegateSignature();
    void VibrateStop__DelegateSignature();
    void UpdateCounter__DelegateSignature();
    void FluteOnopTempoSecond__DelegateSignature();
    void MusicIntroGlass__DelegateSignature();
    void Interact__DelegateSignature();
    void TakeHit__DelegateSignature();
    void FallWaterDeath__DelegateSignature();
    void FluteOnopTempo__DelegateSignature();
    void TriggerCutscene__DelegateSignature();
    void VoidEnter__DelegateSignature();
    void VoidExit__DelegateSignature();
    void Cancel__DelegateSignature();
    void RestartPlayer__DelegateSignature();
    void VoidOpenFirst__DelegateSignature();
    void InputOff__DelegateSignature();
    void InputOn__DelegateSignature();
    void WarpCall__DelegateSignature();
    void RestoreHealth__DelegateSignature();
    void LockCam__DelegateSignature();
    void QuestProgress__DelegateSignature(int32 Amount, TEnumAsByte<E_DailyQuest::Type> Quest);
    void FireballCall__DelegateSignature();
    void DashCall__DelegateSignature();
    void OpenWeaponMenu__DelegateSignature();
    void AttackCall__DelegateSignature();
    void VerticalAttackCall__DelegateSignature();
    void DoubleJumpCall__DelegateSignature();
    void JumpCall__DelegateSignature();
    void ShieldCall__DelegateSignature();
    void SpinAttackCall__DelegateSignature();
    void SpiritHolderDeactivate__DelegateSignature();
    void SpiritHolderActivate__DelegateSignature();
    void DownSmash__DelegateSignature();
    void WallSlideCall__DelegateSignature();
    void FrameFreezeCall__DelegateSignature();
    void ActionActorNext__DelegateSignature();
    void Land__DelegateSignature();
    void Fall__DelegateSignature();
    void AttackDispatcher__DelegateSignature();
    void Die__DelegateSignature();
};

#endif
