#ifndef UE4SS_SDK_enemy_character_parent_HPP
#define UE4SS_SDK_enemy_character_parent_HPP

class AEnemy_Character_Parent_C : public ACharacter
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UAkComponent* Play_Vanish_SFX;
    class UWidgetComponent* Alert;
    class UDecalComponent* Decal_Shadow;
    class UParticleSystemComponent* P_ShowMinion;
    class UParticleSystemComponent* P_BlackSubstance;
    class UPawnSensingComponent* PawnSensing;
    class UWidgetComponent* Widget;
    float Timeline_1_Blur_822C98F144BAA83DF21B958EA7E6AA4E;
    TEnumAsByte<ETimelineDirection::Type> Timeline_1__Direction_822C98F144BAA83DF21B958EA7E6AA4E;
    class UTimelineComponent* Timeline_1;
    float SineMovement_Lerp_97C5E80B4F1D34AD62B657BC40A0A270;
    TEnumAsByte<ETimelineDirection::Type> SineMovement__Direction_97C5E80B4F1D34AD62B657BC40A0A270;
    class UTimelineComponent* SineMovement;
    float Move_Backwards_Alpha_60266F6B46FD51D6B3490E8251C4D0E5;
    TEnumAsByte<ETimelineDirection::Type> Move_Backwards__Direction_60266F6B46FD51D6B3490E8251C4D0E5;
    class UTimelineComponent* Move Backwards;
    float Timeline_0_Blur_825C187D417DDC103C47C7A39E34CFE1;
    TEnumAsByte<ETimelineDirection::Type> Timeline_0__Direction_825C187D417DDC103C47C7A39E34CFE1;
    class UTimelineComponent* Timeline_0;
    float HitBodyFlashTimeline_Hit_97A5830442F72E299E04F098996B4BEA;
    TEnumAsByte<ETimelineDirection::Type> HitBodyFlashTimeline__Direction_97A5830442F72E299E04F098996B4BEA;
    class UTimelineComponent* HitBodyFlashTimeline;
    float RelocateTimeline_Alpha_B4D969DC4291BC66716E99B174DB08EB;
    TEnumAsByte<ETimelineDirection::Type> RelocateTimeline__Direction_B4D969DC4291BC66716E99B174DB08EB;
    class UTimelineComponent* RelocateTimeline;
    bool Recorder Mode;
    class AActor* TargetActor;
    bool Instant Kill;
    bool Min Health;
    float Health;
    FText Name;
    bool Is Boss;
    float CamMaxDistance;
    float MaxHealth;
    float Damage;
    float Damage Body;
    FEnemy_Character_Parent_CDie Die;
    void Die();
    class UWidgetComponent* Widget_0;
    class UEnemyHealth_C* HealthBar-DEPRECATED;
    bool Active;
    bool ShowHealthBar;
    bool AutoStart;
    bool Attacking;
    class AShadowDecal_C* ShadowDecal;
    TEnumAsByte<E_EnemyBehaviour::Type> Behaviour;
    class UBehaviorTree* BT;
    bool UseExpression;
    FST_Expression Expression Detect;
    FST_Expression Expression Angry;
    FST_Expression Expression Unreachable;
    bool Use AgroArea;
    int32 Currency;
    bool StartHidden;
    bool Fighting;
    FLinearColor FogColor;
    int32 BattleFase;
    class UAudioComponent* BossAudio;
    float ShadowScale;
    bool TargetOn;
    TEnumAsByte<EnemyStates::Type> EnemyState;
    bool SkipIntro;
    bool AerialRise;
    bool CanAerialRise;
    bool CanBeBlasted;
    float Fase_01_Damage;
    float Fase_02_Damage;
    float Fase_03_Damage;
    float Health To Fase 2;
    float Health To Fase 3;
    FEnemy_Character_Parent_CTeleportOutDone TeleportOutDone;
    void TeleportOutDone();
    FEnemy_Character_Parent_CTeleportInDone TeleportInDone;
    void TeleportInDone();
    bool CanBeLocked;
    int32 ConsecutiveHits;
    FEnemy_Character_Parent_CRelocateFinished RelocateFinished;
    void RelocateFinished();
    bool Show Trace;
    bool Print Life;
    float OriginalGravity;
    TEnumAsByte<Directions::Type> HitDirection;
    class APlayer_Character_BP_C* PlayerCharacter;
    TArray<class AAttack_Master_C*> Attacks;
    class UMaterialInstanceDynamic* BodyMaterial;
    bool PlayerInAgro;
    bool TeleportedIn;
    bool Stun;
    bool Angry;
    FEnemy_Character_Parent_CCallA CallA;
    void CallA();
    bool HasShadowDecal;
    class UAkAudioEvent* AwareSound;
    TEnumAsByte<Items::Type> ItemDrop;
    bool DropItem;
    FTransform Initial Transform;
    class UEnemyHealth_C* EnemyHealthUI;
    class UBossHealth_C* Boss Health UI;
    bool Moving to Center;
    bool Use Nav Mesh;
    float Check Distance;
    bool Hit Player;
    FEnemy_Character_Parent_COnPlayerWarp OnPlayerWarp;
    void OnPlayerWarp();
    bool Mode Ambush;
    bool Skip Drop;
    bool Heal when Die;
    bool Is Hidden;
    int32 MaxCurrencyDrop;
    int32 MinCurrencyDrop;
    bool BT Flip Flop;
    bool Spawn Fast;
    bool Spawn Black Substance;
    bool Minus5dB;
    TEnumAsByte<EMovementMode> StartMovementMode;
    bool SetIdleInCutscene;
    bool TempIdle;
    FVector PreFreezeVelocity;
    float OriginalDamage;
    float OriginalMaxHealth;
    FVector MoveBackOriginal;
    FVector MoveBackDire;
    bool ShowTraceCheckWall;
    float BodyParticleFastRate;
    FColor VFX Color;
    FVector StartAttackLocation;
    bool IsDead;
    float LockCamPitchOffset;
    float LockCamDistanceOffset;
    bool FreezePause;
    float ChangeCurrencyShadow;
    class UEnemy_Behaviour_FX_C* AlertUI;
    bool HitSuccess;
    FName HealthParentBone;
    FVector HealthParentOffset;
    FVector Start Relative Location;
    float Sine Speed;
    float Sine Max Position;
    bool IsPlayingExpression;
    FVector Last Player Location;
    float VFX Death Scale;
    int32 Current Difficulty;
    bool IsParry;
    float LockCamZOffset;
    float VerticalSeeDistance;
    float PlayerDirectionChase;
    FEnemy_Character_Parent_CBreak Attack Break Attack;
    void Break Attack();
    float LockOffsetDisplay;
    bool DestroyAnimInstanceOnPause;
    float LastMaxWalkSpeed;
    TEnumAsByte<EPhysicalSurface> EnemySurface;
    class AEnemy_Master_AiController_C* IAMaster;
    int32 LoopCurrentValue;
    int32 LoopMaxValue;
    class UAnimMontage* CurrentAnimMontage;
    FName CurrentSection;
    int32 DamageCounter;
    int32 MaxDamageCounter;
    bool CanModifyBrakingFriction;
    int32 Random Index;
    FEnemy_Character_Parent_CDieMinion DieMinion;
    void DieMinion(class AActor* SelfReference);

    void PlayAnim(class UAnimMontage* Current Montage, TEnumAsByte<E_AnimSections::Type> SectionName, bool Is Attacking, bool IsPlayingExpression, class USkeletalMeshComponent*& Skeletal Mesh, class UAnimMontage*& Montage to Play, FName& Section);
    void CanSkipSequence(bool& Skip);
    void RandomLoop(bool& Set, FIntVector& Set Values, bool& Loop Completed);
    void GetDifficulty(float Newcomer, float Recommended, float Brutal, float& Result, int32& Difficulty);
    void RecieveHit(float Damage, TSubclassOf<class UCameraShake> Shake, class UAkAudioEvent* AkEvent, bool OverrideHitTimeline, bool Cancel Rotate, bool Reset Agro, bool VFX Hit, const class UDamageType* DamageType, bool& Dead);
    void RelocateTimeline__FinishedFunc();
    void RelocateTimeline__UpdateFunc();
    void HitBodyFlashTimeline__FinishedFunc();
    void HitBodyFlashTimeline__UpdateFunc();
    void SineMovement__FinishedFunc();
    void SineMovement__UpdateFunc();
    void Move Backwards__FinishedFunc();
    void Move Backwards__UpdateFunc();
    void Timeline_0__FinishedFunc();
    void Timeline_0__UpdateFunc();
    void Timeline_1__FinishedFunc();
    void Timeline_1__UpdateFunc();
    void OnNotifyEnd_E4A3E4BE4FEA9C6B20F39295875BC5AE(FName NotifyName);
    void OnNotifyBegin_E4A3E4BE4FEA9C6B20F39295875BC5AE(FName NotifyName);
    void OnInterrupted_E4A3E4BE4FEA9C6B20F39295875BC5AE(FName NotifyName);
    void OnBlendOut_E4A3E4BE4FEA9C6B20F39295875BC5AE(FName NotifyName);
    void OnCompleted_E4A3E4BE4FEA9C6B20F39295875BC5AE(FName NotifyName);
    void Init VoidMaker();
    void VFX Rate Body(bool Rate Fast);
    void VFX Dash(float Delay, float Lerp Distance);
    void VFX Slash(float Delay, float Rotation, float Scale);
    void VFX Shadow(bool Visibility);
    void VFX Body Particle(bool Show);
    void VFX Death();
    void VFX Teleport();
    void SFX Death();
    void TeleportOut();
    void TeleportIn();
    void Relocate(FVector CurrentLocation, FVector Target, float Duration, bool Stop);
    void TeleportInExtra();
    void TeleportOutExtra();
    void RotateToPlayer(bool SingleBurst, bool On, float RotateSpeed, float RotateSpeedCurve(1isnone), bool Rotation to Movement);
    void RotateToPlayerTick();
    void RotateToPlayerInstant();
    void CancelRotToPlayer();
    void StartTimerA(float Time);
    void CallTimerA();
    void CancelTimerA();
    void StartTimerACall();
    void CancelTimerACall();
    void Attack(int32 Selection, int32 Count, int32 Max Count, bool Use Custom Counter);
    void Attack01(int32 Count, int32 Max Count, bool Use Custom Counter);
    void AttackWindowOpen();
    void AttackWindowClose();
    void AttackWindowOpenCall();
    void AttackWindowCloseCall();
    void Attack02(int32 Count, int32 Max Count, bool Use Custom Counter);
    void HitBodyFlash();
    void StopStun();
    void StartStun();
    void CancelFollow();
    void Attack03(int32 Count, int32 Max Count, bool Use Custom Counter);
    void ExitBounds();
    void BeginAwareSound();
    void Start Movement(int32 N);
    void End Movement(int32 N);
    void RotateToInit(const float& Rotate Speed, const float& Rotate Speed Curve, const bool& On);
    void RotateToInitTick();
    void Update Health UI(float Health, float Max Health);
    void Restore Health();
    void In Room Center(bool CheckPlayerIsDead);
    void Anim Move Front(bool Move);
    void Anim Move Back(bool Move);
    void Call Event(FString Event Name);
    void Agro();
    void BndEvt__PawnSensing_K2Node_ComponentBoundEvent_2_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
    void BndEvt__PawnSensing_K2Node_ComponentBoundEvent_3_HearNoiseDelegate__DelegateSignature(class APawn* Instigator, const FVector& Location, float Volume);
    void CheckDistance();
    void Start Agro(bool Start);
    void Attack04(int32 Count, int32 Max Count, bool Use Custom Counter);
    void Attack05(int32 Count, int32 Max Count, bool Use Custom Counter);
    void Instant Combat(float Delay);
    void Death Minion();
    void Show Minion();
    void Hide Minion();
    void Show Minion Extra();
    void Hide Minion Extra();
    void OnLanded(const FHitResult& Hit);
    void On Landed Extra();
    void Instant Combat Extra();
    void Set Visible Mesh(bool Visible);
    void CheckWall();
    void FreezeState(bool Freeze);
    void ExtraFreeze();
    void ExtraUnfreeze();
    void Force Idle State();
    void Force Agro State(class APawn* Actor);
    void Force Idle State Extra();
    void Expression(TEnumAsByte<E_Expression::Type> Expression);
    void Sine(bool Play);
    void AttackExpression(int32 Number);
    void AttackExpression_01();
    void AttackExpression_02();
    void AttackExpression_03();
    void AttackExpression_04();
    void AttackExpression_05();
    void AttackExpression_06();
    void ReturnHandler1(bool Bool1, bool Bool2);
    void StartHealing();
    void StopDodge();
    void Attack 06(int32 Count, int32 Max Count, bool Use Custom Counter);
    void Idle Post Combat();
    void ReceiveEnemyHandler01(bool HitA, bool HitB);
    void ReceiveEnemyFunc03(bool Hit, FVector Location, FRotator Rotation, TEnumAsByte<EPhysicalSurface> SurfaceType);
    void Rise(float DropOn, bool KeepInAir);
    void TickAdjusttoPlayerZ();
    void EndRise();
    void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
    void EnemyLaunch(TEnumAsByte<Directions::Type> Direction, FVector Origin);
    void RiseMontage();
    void FinishRise();
    void Make Flip Flop();
    void Back to Original Transform();
    void PlayBounceBack(float Force, bool UsePlayerZ);
    void StopMoveBack();
    void Set Braking Friction(bool SeparateBrakingFriction);
    void ReceiveBeginPlay();
    void ShadowLoop();
    void ReceiveDestroyed();
    void DestroyCall();
    void UpdateState(bool Active - Deprecated, bool ChangeState, TEnumAsByte<EnemyStates::Type> EnemyState, bool NextFase, FString Message);
    void ReceiveEndPlay(TEnumAsByte<EEndPlayReason::Type> EndPlayReason);
    void SpawnShadow();
    void StartBoss();
    void ShowName();
    void EndIntro();
    void BossName();
    void RadialBlurGrowl(bool Scream, float ScreamScale, bool ShortScream);
    void LockedOn();
    void LockedOff();
    void EndBoss();
    void On Player Die();
    void Boss Appear();
    void Boss Desappear();
    void Restart();
    void Play Custom Cutscene();
    void Resume Custom Cutscene();
    void Relocate Player();
    void Set New Player Location(FVector New Location);
    void PlayerDieRun();
    void Create UI();
    void Set Visibility UI(bool Visibility);
    void Set One Hit Health();
    void Set Custom Health(float Health);
    void Replace by Statue(float Delay);
    void UnloadCall();
    void Move to Center(bool Moving);
    void Destroy Used();
    void Destroy Used Extra();
    void Show Teleport();
    void On Stream Out();
    void PlayCustomCutsceneExtra();
    void ResumeCustomCutsceneExtra();
    void AdjustDifficulty(bool BeginPlay);
    void AdjustHealthonDifficultyChange();
    void Kill();
    void CustomDamage(float Damage, bool Play Custom Animation);
    void DestroyStatue();
    void DontDestroyPawnSensing();
    void Fade Boss Health();
    void RetryBeginPlay();
    void Force Idle Animation();
    void UpdateBehaviour(int32 Behaviour);
    void Control Anim Montage(bool Stop);
    void OnAgroStateChanged(bool IsAgro);
    void Set Max Heal UI(bool Show, float Health);
    void MoveToRandomPlarform();
    void ReceiveEnemyFunc02(bool Hit, FVector Location, FRotator Rotation, TEnumAsByte<EPhysicalSurface> SurfaceType);
    void ExecuteUbergraph_Enemy_Character_Parent(int32 EntryPoint);
    void DieMinion__DelegateSignature(class AActor* SelfReference);
    void Break Attack__DelegateSignature();
    void OnPlayerWarp__DelegateSignature();
    void CallA__DelegateSignature();
    void RelocateFinished__DelegateSignature();
    void TeleportInDone__DelegateSignature();
    void TeleportOutDone__DelegateSignature();
    void Die__DelegateSignature();
};

#endif
