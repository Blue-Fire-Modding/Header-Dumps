#ifndef UE4SS_SDK_TraceHandler_HPP
#define UE4SS_SDK_TraceHandler_HPP

class ATraceHandler_C : public ARobiTraceHandler
{
    FPointerToUberGraphFrame UberGraphFrame;
    class USceneComponent* DefaultSceneRoot;
    FTraceHandler_CTraceHandlerAEvent TraceHandlerAEvent;
    void TraceHandlerAEvent(TEnumAsByte<EPhysicalSurface> Surface);
    FTraceHandler_CTraceHandlerBEvent TraceHandlerBEvent;
    void TraceHandlerBEvent(TEnumAsByte<EPhysicalSurface> Surface, FVector ImpactPoint, bool Hit);
    FTraceHandler_CTraceHandlerCEvent TraceHandlerCEvent;
    void TraceHandlerCEvent(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    FTraceHandler_CTraceHandlerDEvent TraceHandlerDEvent;
    void TraceHandlerDEvent(TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    FTraceHandler_CTraceHandlerEEvent TraceHandlerEEvent;
    void TraceHandlerEEvent(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    FTraceHandler_CTraceHandlerFEvent TraceHandlerFEvent;
    void TraceHandlerFEvent(FVector ImpactPoint, TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    FTraceHandler_CHandlerAttackAEvent HandlerAttackAEvent;
    void HandlerAttackAEvent(bool Hit);
    FTraceHandler_CHandlerAttackBEvent HandlerAttackBEvent;
    void HandlerAttackBEvent(bool Hit, FVector ImpactPoint);
    FTraceHandler_CHandlerAttackCEvent HandlerAttackCEvent;
    void HandlerAttackCEvent(bool Hit);
    TArray<FHitStruct> TempArray;
    FTraceHandler_CPlayerHandlerEvent_01 PlayerHandlerEvent_01;
    void PlayerHandlerEvent_01();
    FTraceHandler_CPlayerHandlerEvent_02 PlayerHandlerEvent_02;
    void PlayerHandlerEvent_02();
    FTraceHandler_CPlayerHandlerEvent_03 PlayerHandlerEvent_03;
    void PlayerHandlerEvent_03(bool Hit);
    FTraceHandler_CPlayerHandlerEvent_04 PlayerHandlerEvent_04;
    void PlayerHandlerEvent_04(FVector ImpactNormal);
    FTraceHandler_CPlayerHandlerEvent_05 PlayerHandlerEvent_05;
    void PlayerHandlerEvent_05(bool Hit, FVector Location, FVector ImpactNormal);
    FTraceHandler_CPlayerHandlerEvent_06 PlayerHandlerEvent_06;
    void PlayerHandlerEvent_06();
    FTraceHandler_CPlayerHandlerEvent_07 PlayerHandlerEvent_07;
    void PlayerHandlerEvent_07();
    FTraceHandler_CPlayerHandlerEvent_08 PlayerHandlerEvent_08;
    void PlayerHandlerEvent_08();
    FTraceHandler_CPlayerHandlerEvent_09 PlayerHandlerEvent_09;
    void PlayerHandlerEvent_09(bool Hit);
    FTraceHandler_CPlayerHandlerEvent_10 PlayerHandlerEvent_10;
    void PlayerHandlerEvent_10(bool Hit, FVector OutHitLocation, FVector OutHitTraceEnd);
    FTraceHandler_CPlayerHandlerEvent_11 PlayerHandlerEvent_11;
    void PlayerHandlerEvent_11(FVector ImpactPoint);
    FTraceHandler_CPlayerHandlerEvent_12 PlayerHandlerEvent_12;
    void PlayerHandlerEvent_12(bool Hit, FVector ImpactPoint, FVector ImpactNormal);
    FTraceHandler_CPlayerHandlerEvent_13 PlayerHandlerEvent_13;
    void PlayerHandlerEvent_13();
    FTraceHandler_CPlayerHandlerEvent_14 PlayerHandlerEvent_14;
    void PlayerHandlerEvent_14(bool Hit);
    FTraceHandler_CPlayerHandlerEvent_15 PlayerHandlerEvent_15;
    void PlayerHandlerEvent_15(bool Hit);
    FTraceHandler_CPlayerHandlerEvent_16 PlayerHandlerEvent_16;
    void PlayerHandlerEvent_16();
    FTraceHandler_CPlayerHandlerEvent_17 PlayerHandlerEvent_17;
    void PlayerHandlerEvent_17(bool Hit);
    FTraceHandler_CPlayerHandlerEvent_18 PlayerHandlerEvent_18;
    void PlayerHandlerEvent_18(FVector Location, FVector ImpactPoint, FVector ImpactNormal);
    FTraceHandler_CPlayerHandlerEvent_19 PlayerHandlerEvent_19;
    void PlayerHandlerEvent_19();
    FTraceHandler_CPlayerHandlerEvent_20 PlayerHandlerEvent_20;
    void PlayerHandlerEvent_20();
    FTraceHandler_CPlayerHandlerEvent_21 PlayerHandlerEvent_21;
    void PlayerHandlerEvent_21();
    FTraceHandler_CPlayerHandlerEvent_22 PlayerHandlerEvent_22;
    void PlayerHandlerEvent_22();
    FTraceHandler_CPlayerHandlerEvent_23 PlayerHandlerEvent_23;
    void PlayerHandlerEvent_23();
    FTraceHandler_CPlayerHandlerEvent_24 PlayerHandlerEvent_24;
    void PlayerHandlerEvent_24();
    FTraceHandler_CPlayerHandlerEvent_25 PlayerHandlerEvent_25;
    void PlayerHandlerEvent_25();
    FTraceHandler_CPlayerHandlerEvent_26 PlayerHandlerEvent_26;
    void PlayerHandlerEvent_26();
    FTraceHandler_CPlayerHandlerEvent_27 PlayerHandlerEvent_27;
    void PlayerHandlerEvent_27();
    FTraceHandler_CPlayerHandlerEvent_28 PlayerHandlerEvent_28;
    void PlayerHandlerEvent_28();
    FTraceHandler_CPlayerHandlerEvent_29 PlayerHandlerEvent_29;
    void PlayerHandlerEvent_29();
    FTraceHandler_CPlayerHandlerEvent_30 PlayerHandlerEvent_30;
    void PlayerHandlerEvent_30();
    FTraceHandler_CPlayerHandlerEvent_31 PlayerHandlerEvent_31;
    void PlayerHandlerEvent_31();
    FTraceHandler_CPlayerHandlerEvent_32 PlayerHandlerEvent_32;
    void PlayerHandlerEvent_32();
    FTraceHandler_CPlayerHandlerEvent_33 PlayerHandlerEvent_33;
    void PlayerHandlerEvent_33();
    FTraceHandler_CPlayerHandlerEvent_34 PlayerHandlerEvent_34;
    void PlayerHandlerEvent_34();
    FTraceHandler_CPlayerHandlerEvent_35 PlayerHandlerEvent_35;
    void PlayerHandlerEvent_35();
    FTraceHandler_CPlayerHandlerEvent_36 PlayerHandlerEvent_36;
    void PlayerHandlerEvent_36();
    FTraceHandler_CPlayerHandlerEvent_37 PlayerHandlerEvent_37;
    void PlayerHandlerEvent_37();
    FTraceHandler_CPlayerHandlerEvent_38 PlayerHandlerEvent_38;
    void PlayerHandlerEvent_38();
    class APlayer_Character_BP_C* PlayerCharacter;
    FTraceHandler_CEnemyHandler01_0 EnemyHandler01_0;
    void EnemyHandler01_0(bool Bool1, bool Bool2);
    FTraceHandler_CEnemyHandler02 EnemyHandler02;
    void EnemyHandler02();
    float BelowObjectSpeed;
    class UPrimitiveComponent* BelowHitComponent;
    FVector BelowHitObjLocation;
    TArray<FVector> BelowHitObjLocationArray;
    TArray<float> BelowObjectSpeedArray;
    float BelowObjectSpeedAverage;

    void Enemy Func 03 Old(class AActor* [0], TEnumAsByte<ETraceTypeQuery> TraceChannel, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType, bool& Hit, FVector& Loc, TEnumAsByte<EPhysicalSurface>& SurfaceType);
    void Enemy Func 02 Old(const FVector Start, const FVector End, class AActor* [0], TEnumAsByte<ETraceTypeQuery> TraceChannel, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType, bool& Hit, FVector& Loc, FRotator& Rot);
    void Trace For Target Old(class AActor* Actor, bool& IsVisible);
    void PlayerHandler_11(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore, float Radius);
    void PlayerHandler_12(const FVector Start, const FVector End, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore);
    void CameraCloseGate();
    void CameraHandlerLogicOld(float Generic Cam X Axis, float Generic Cam Y Axis);
    void SpellDamageHandlerOld(FVector SpellDamageLocation, float InputPin, const TArray<class AActor*>& ActorsToIgnore);
    void HandlerAttack_B(const FVector Start, const FVector End, const FVector HalfSize, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType);
    void HandlerAttack_C(const FVector Start, const FVector End, const FVector HalfSize, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType);
    void PlayerHandler_13(const FVector Start, const FVector End, const FVector HalfSize, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore);
    void CamHandler_01();
    void SpinAttackHandlerOld();
    void PlayerHandler_05(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore, bool Index, const FVector Start2, FVector End2, float Orientation Z (Yaw));
    void TraceHandler_B(FVector Start, FVector End, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes);
    void PlayerHandler_14(const FVector Start, const FVector End, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_15(const FVector Start, const FVector End, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, bool ComplexTrace, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType, const FVector Start2, const FVector End2, const FVector Start3, const FVector End3, const FVector Start4, const FVector End4);
    void PlayerHandler_19();
    void Cam_TraceHandler_02(const FVector Start, const FVector End, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjTypes, const TArray<class AActor*>& ActorsToIgnore);
    void EnemyHandler_01(const TArray<class AActor*>& ActorsToIgnore, class AActor* Target);
    void PlayerHandler_18(const FVector Start, const FVector End, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, const FVector Start2, const FVector End2);
    void PlayerHandler_16(const FVector Start, const FVector End, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, const FVector Start2, const FVector End2);
    void PlayerHandler_02(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_03(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_01(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_04(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_06(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_09(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_10(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void TraceHandler_A(FVector Start, FVector End);
    void TraceHandler_C(FVector Start, FVector End);
    void TraceHandler_D(FVector Start, FVector End, const FVector End2);
    void TraceHandler_E(FVector Start, FVector End);
    void TraceHandler_F(FVector Start, FVector End);
    void HandlerAttack_A(FVector Start, FVector End, class AActor* AttackWave, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType);
    void PlayerHandler_07(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_08(const FVector Start, const FVector End, const TArray<class AActor*>& ActorsToIgnore);
    void PlayerHandler_17(const FVector Start, const FVector End, const FRotator Orientation, const TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, const TArray<class AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace::Type> DrawDebugType, const FVector Start2, const FVector End2, const FVector Start3, const FVector End3, FVector CapsuleHitImpactNormal);
    void ExecuteUbergraph_TraceHandler(int32 EntryPoint);
    void EnemyHandler02__DelegateSignature();
    void EnemyHandler01_0__DelegateSignature(bool Bool1, bool Bool2);
    void PlayerHandlerEvent_38__DelegateSignature();
    void PlayerHandlerEvent_37__DelegateSignature();
    void PlayerHandlerEvent_36__DelegateSignature();
    void PlayerHandlerEvent_35__DelegateSignature();
    void PlayerHandlerEvent_34__DelegateSignature();
    void PlayerHandlerEvent_33__DelegateSignature();
    void PlayerHandlerEvent_32__DelegateSignature();
    void PlayerHandlerEvent_31__DelegateSignature();
    void PlayerHandlerEvent_30__DelegateSignature();
    void PlayerHandlerEvent_29__DelegateSignature();
    void PlayerHandlerEvent_28__DelegateSignature();
    void PlayerHandlerEvent_27__DelegateSignature();
    void PlayerHandlerEvent_26__DelegateSignature();
    void PlayerHandlerEvent_25__DelegateSignature();
    void PlayerHandlerEvent_24__DelegateSignature();
    void PlayerHandlerEvent_23__DelegateSignature();
    void PlayerHandlerEvent_22__DelegateSignature();
    void PlayerHandlerEvent_21__DelegateSignature();
    void PlayerHandlerEvent_20__DelegateSignature();
    void PlayerHandlerEvent_19__DelegateSignature();
    void PlayerHandlerEvent_18__DelegateSignature(FVector Location, FVector ImpactPoint, FVector ImpactNormal);
    void PlayerHandlerEvent_17__DelegateSignature(bool Hit);
    void PlayerHandlerEvent_16__DelegateSignature();
    void PlayerHandlerEvent_15__DelegateSignature(bool Hit);
    void PlayerHandlerEvent_14__DelegateSignature(bool Hit);
    void PlayerHandlerEvent_13__DelegateSignature();
    void PlayerHandlerEvent_12__DelegateSignature(bool Hit, FVector ImpactPoint, FVector ImpactNormal);
    void PlayerHandlerEvent_11__DelegateSignature(FVector ImpactPoint);
    void PlayerHandlerEvent_10__DelegateSignature(bool Hit, FVector OutHitLocation, FVector OutHitTraceEnd);
    void PlayerHandlerEvent_09__DelegateSignature(bool Hit);
    void PlayerHandlerEvent_08__DelegateSignature();
    void PlayerHandlerEvent_07__DelegateSignature();
    void PlayerHandlerEvent_06__DelegateSignature();
    void PlayerHandlerEvent_05__DelegateSignature(bool Hit, FVector Location, FVector ImpactNormal);
    void PlayerHandlerEvent_04__DelegateSignature(FVector ImpactNormal);
    void PlayerHandlerEvent_03__DelegateSignature(bool Hit);
    void PlayerHandlerEvent_02__DelegateSignature();
    void PlayerHandlerEvent_01__DelegateSignature();
    void HandlerAttackCEvent__DelegateSignature(bool Hit);
    void HandlerAttackBEvent__DelegateSignature(bool Hit, FVector ImpactPoint);
    void HandlerAttackAEvent__DelegateSignature(bool Hit);
    void TraceHandlerFEvent__DelegateSignature(FVector ImpactPoint, TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    void TraceHandlerEEvent__DelegateSignature(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    void TraceHandlerDEvent__DelegateSignature(TEnumAsByte<EPhysicalSurface> Surface, bool Hit);
    void TraceHandlerCEvent__DelegateSignature(bool Hit, TEnumAsByte<EPhysicalSurface> Surface);
    void TraceHandlerBEvent__DelegateSignature(TEnumAsByte<EPhysicalSurface> Surface, FVector ImpactPoint, bool Hit);
    void TraceHandlerAEvent__DelegateSignature(TEnumAsByte<EPhysicalSurface> Surface);
};

#endif
