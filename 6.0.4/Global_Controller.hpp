#ifndef UE4SS_SDK_Global_Controller_HPP
#define UE4SS_SDK_Global_Controller_HPP

class AGlobal_Controller_C : public AActor
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UDirectionalLightComponent* DirectionalLight;
    class UExponentialHeightFogComponent* ExponentialHeightFog;
    class UBillboardComponent* Billboard;
    class UPostProcessComponent* PostProcess;
    float Timeline_0_Lerp_2890453349BB5BC5E77E1A8F1AE4C6BC;
    TEnumAsByte<ETimelineDirection::Type> Timeline_0__Direction_2890453349BB5BC5E77E1A8F1AE4C6BC;
    class UTimelineComponent* Timeline_0;
    float FogChangeColor_Lerp_E824A45544EFF3BD8246DB8F176787D1;
    TEnumAsByte<ETimelineDirection::Type> FogChangeColor__Direction_E824A45544EFF3BD8246DB8F176787D1;
    class UTimelineComponent* FogChangeColor;
    TArray<TEnumAsByte<Areas::Type>> DebugTestAreas;
    class UMaterialInstanceDynamic* PPMaterial;
    bool Editor;
    bool ViewGamePercentage;
    bool Recorder Mode;
    bool UseNavMesh;
    bool IgnoreCommands;
    bool FullPlayer;
    bool Tutorials;
    FString CurrentFog;
    class UBlueFireSaveGame_C* SaveGameObject;
    bool WallJump;
    bool DoubleJump;
    bool DownSmash;
    bool Dash;
    bool Attack;
    class UBlueFire_Game_Instance_C* GameInstance;
    bool FireBall;
    bool Sprint;
    bool Grind;
    bool InfiniteStamina;
    float MasterTimeDilatation;
    bool Invinsible;
    FVector SavedEditorLocation;
    bool bLock;
    bool CustomPlayer;
    FGlobal_Controller_CPCGamepadChange PCGamepadChange;
    void PCGamepadChange();
    bool FreezeOnDebug;
    class APlayer_Character_BP_C* Player;
    TArray<FName> VisibleLevels;
    bool AlreadyAddedLevel;
    bool LoadedLevel;
    FGlobal_Controller_CDoneLoadingLevels DoneLoadingLevels;
    void DoneLoadingLevels();
    TEnumAsByte<Areas::Type> CurrentArea;
    bool VoidLoaded;
    class UAkAudioEvent* LastAreaMusic;
    bool SpinAttack;
    bool GraphicDebugOptionsConsole;
    bool FogVisible;
    int32 Shots;
    bool DebugMusic;
    bool DebugAmbiences_Deprecated;
    FLinearColor OriginalColor;
    FFogSettings Stoneheart;
    FFogSettings ArcaneTunnels;
    FFogSettings IceCavern;
    FFogSettings SandTemple;
    FFogSettings IronCaves;
    FFogSettings BlazeRiver;
    FFogSettings ShadowFortress;
    FFogSettings PenumbrasTemple;
    FFogSettings EyasForest;
    float OriginalFogDensity;
    float OriginalMaxOpacity;
    float OriginalStartDistance;
    float OriginalHeightFalloff;
    bool DemoTimeOut;
    TEnumAsByte<Weapons::Type> Weapon;
    TEnumAsByte<Tunics::Type> Tunic;
    TArray<TEnumAsByte<Spirits::Type>> EquippedSpirits;
    int32 SpiritSlots;
    bool WaterDamage;
    bool HideFromEnemies;
    FSave_PlayerStats Stats;
    TArray<FName> AllLevels;
    int32 LevelLoadingIndex;
    int32 AttackUpgrades;
    int32 LevelUnloadingIndex;
    int32 MovementUpgrades;
    int32 DefenseUpgrades;
    TArray<TEnumAsByte<E_DailyQuest::Type>> DailyQuestsList;
    class ATutorialText_C* Tutorial;
    TArray<FFogSettings> FogSettings;
    FFogSettings CheckPointFog;
    bool BlockStreaming;
    class AAllVoids_Controller_C* AllVoidsController;
    class AActor* PlayerStart;
    TArray<FName> EditorVisibleLevels;
    bool VisibleMethodON_LoadMethodOff;
    int32 LevelLoadingIndex2;
    TArray<FName> VisibleLevelsDebugLoad;
    class AActor* UthasDemoStart;
    class AActor* NuosStart;
    TEnumAsByte<StreamingChunks::Type> Chunk;
    TArray<FName> AllLevelsPermanent;
    FString AreaTravelString;
    FGlobal_Controller_CSpecialAreaTravel SpecialAreaTravel;
    void SpecialAreaTravel();
    FTransform Travel New Loc;
    FVector TempLocation;
    FGlobal_Controller_CStreamOut StreamOut;
    void StreamOut();
    TEnumAsByte<Areas::Type> LastArea;
    class UDebugLevel_C* DebugLevel;
    int32 BeiraVesselIndex;
    bool ElevatorFindSuccess;
    class ULoadScreen_C* LoadScreen;
    bool ShowingAreaIntro;
    FGlobal_Controller_CAreaIntroFinished AreaIntroFinished;
    void AreaIntroFinished();
    bool DebugToolsOn;
    bool TurnOffMusic;
    bool TurnOffAmbiences;
    class UAreaIntro_C* AreaIntro;
    class AActor* CreditsCam;
    class UQuest_PopUp_C* Quest Popup;
    float SleepTime;
    class AActor* PauseCam;
    FGlobal_Controller_CShowCredits ShowCredits;
    void ShowCredits();
    bool CanShowAreaIntro;
    class UWarpUI_C* WarpUI;
    FGlobal_Controller_CRemoveUI RemoveUI;
    void RemoveUI();
    FGlobal_Controller_CAddUI AddUI;
    void AddUI();
    bool PlayingCredits;
    class UDebugGamePorcentage_C* GamePorcentageUI;
    TArray<FName> AllLevelsSave;
    TEnumAsByte<StreamingChunks::Type> InitialChunck;
    bool DebugLoadLevels;
    class UMessage_PopUp_C* MessasPopUpUI;
    class UPCGamePadUI_C* PCGamePadUI;
    class USleepMode_C* SleepModeUI;
    int32 LevelVisibleIndex;
    TEnumAsByte<StreamingChunks::Type> AreaTravelTemp_Chunck;
    bool AreaTravelTemp_AreaName;
    bool AreaTravelTemp_ShowAllLevels;
    bool AreaTravelTemp_OverrideSafeSpot;
    bool AreaTravelTemp_IsBeginPlay;
    bool AreaTravelTemp_Fade;
    bool AreaTravelTemp_SkipNormalRespawn;
    bool AreaTravelTemp_Debug;
    FTransform AreaTravelTemp_NewPlayerLoc;
    TArray<FName> AreaTravelTemp_VisibleLevels;
    bool RemoveLoadingFade;
    bool VoidDLCLevel;
    class UVoidExit_C* VoidExitUI;
    bool EditorQuickPlay;
    bool QuickPlaySkip;
    bool ScreenshotMode;
    FGlobal_Controller_CLevelLoaded LevelLoaded;
    void LevelLoaded();
    class UVoidExit_SealedLand_C* Void Exit SealedLand UI;
    class ULevelSequence* CreditsSequence;
    FGlobal_Controller_CAnyKey AnyKey;
    void AnyKey();
    bool TempPaused;
    bool bVoidMaker Fast Start;

    void GetPlayerStartTransform(FTransform& Transform);
    void Is Not Console(bool& Result);
    void GetFogColor(TEnumAsByte<Areas::Type> Area, FLinearColor& NewParam);
    void GetLevelName(TEnumAsByte<Areas::Type> Index, FName& LevelName);
    void UserConstructionScript();
    void FogChangeColor__FinishedFunc();
    void FogChangeColor__UpdateFunc();
    void Timeline_0__FinishedFunc();
    void Timeline_0__UpdateFunc();
    void OnNotifyEnd_B6A6CF574BA6CB23D77D6EA2EA0CE3A4(FName NotifyName);
    void OnNotifyBegin_B6A6CF574BA6CB23D77D6EA2EA0CE3A4(FName NotifyName);
    void OnInterrupted_B6A6CF574BA6CB23D77D6EA2EA0CE3A4(FName NotifyName);
    void OnBlendOut_B6A6CF574BA6CB23D77D6EA2EA0CE3A4(FName NotifyName);
    void OnCompleted_B6A6CF574BA6CB23D77D6EA2EA0CE3A4(FName NotifyName);
    void OnNotifyEnd_55B65EA047C47014606FE8BD881805BF(FName NotifyName);
    void OnNotifyBegin_55B65EA047C47014606FE8BD881805BF(FName NotifyName);
    void OnInterrupted_55B65EA047C47014606FE8BD881805BF(FName NotifyName);
    void OnBlendOut_55B65EA047C47014606FE8BD881805BF(FName NotifyName);
    void OnCompleted_55B65EA047C47014606FE8BD881805BF(FName NotifyName);
    void OnFailure_D9EECAA04BA716EFCEC8AB94A59F85B6();
    void OnSuccess_D9EECAA04BA716EFCEC8AB94A59F85B6();
    void OnFailure_BC2F8CEF4FAF939E19996C93B0A592EB(FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
    void OnSuccess_BC2F8CEF4FAF939E19996C93B0A592EB(FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
    void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(FKey Key);
    void Play Credits(class ULevelSequence* LevelSequence);
    void Credi();
    void StartCastleAmb();
    void Play Credits DLC VoidMaster();
    void StartCtuscene();
    void EndCutscene();
    void TextAllVoids();
    void TextAllVoids1();
    void TextAllVoids2();
    void TextAllVoids3();
    void TextAllVoids4();
    void UmbraAnim();
    void UmbraTunic();
    void UmbraAnimReset();
    void Void Load Screen();
    void QuestStatusUpdate(TEnumAsByte<QuestStatusType::Type> Quest Operation, TEnumAsByte<Quests::Type> Quest);
    void Force Remove QuestPopUp();
    void AddAchievement(TEnumAsByte<Achievements::Type> Achievement);
    void XboxSetPostProcessChange(int32 Index);
    void StartWarp();
    void LoadDebugArea();
    void AddLevelToCurrentlyLoaded(const TArray<FName>& AreasToMakeVisible, bool Show);
    void DeathUnloadLevels();
    void RemoveLevelToCurrentlyLoaded(const TArray<FName>& Array);
    void VoidExitMakeLevelsVisible();
    void ClearLevelList();
    void LoadVoid(FName Void);
    void UnloadVoid();
    void EnterVoidLevelsHide();
    void LoadAllLevels();
    void ShowVisibleLevels();
    void Load(FName InName);
    void NextLevelLoad();
    void NextLevelUnload();
    void UnloadLevel(FName InName);
    void DebugLoadAll();
    void DebugReturnLoadAll();
    void TeleportToTempleEntrance(FString Origin);
    void PrevLoaded();
    void AreaTravel(TEnumAsByte<StreamingChunks::Type> NewChunk, bool Show Area Name, const TArray<FName>& VisibleLevels, const FTransform& NewPlayerLocation, bool Debug, FString String, bool SkipNormalRespawn, bool Fade, bool Is Begin Play, bool Override Safe Spot, bool ShowAllLevels, bool Save, bool Void Load Screen);
    void LoadNextArea();
    void Start();
    void CheckPointReload(TEnumAsByte<StreamingChunks::Type> Chunk, const TArray<FName>& VisibleLevels);
    void Retry Find Elevator();
    void RestartLoadFog();
    void VisibleNext(FName InName);
    void MakeNextLevelVisible();
    void SetPlayerToDestination();
    void NextLevelMakeVisible();
    void MakeVisible(FName InName);
    void GodStoneGrab(FText GodStoneName, bool MoveToLocation, FVector Location);
    void PlayerSuperFreeze();
    void AttackCamEffect();
    void PauseCallPCGamepadChange();
    void StartTimerSleep();
    void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
    void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
    void ChangeStadiaController();
    void BindStadiaController();
    void NoSpaceInInventory();
    void GlobalAreaName();
    void ShowAreaName();
    void Remove AreaIntro();
    void Force Remove AreaIntro();
    void MoveFog();
    void ChangeFogColor(float PlayRate, FLinearColor NewColor);
    void RevertFogColor();
    void ChangeFogToCheckpoint(TEnumAsByte<Areas::Type> Area, bool Instant);
    void FogDeactivate();
    void FogActivate();
    void ChangeFogToString(bool Instant, FString Area, bool Construct, FString Origin);
    void ChangeFogColorStringTime(float PlayRate, FString String);
    void RevFog();
    void ReceiveBeginPlay();
    void Save(bool HiddenSave, bool Show HUD);
    void GamePercentAdd(float Percent, FString PercentageName, int32 PercentInt);
    void Timer();
    void addshots();
    void UpdateDebugLevel(const FName Void Name, const TArray<FName>& Custom Names);
    void ShowDebugLevel(bool Show);
    void BindApplicationDelegates();
    void Application Has Entered Foreground();
    void Application Has Reactivated();
    void Application Will Deactivate();
    void Application Will Enter Background();
    void OnXboxLogout();
    void Go to MainMenu();
    void RetryPlayerCast();
    void Save Credits(bool is DLC);
    void ExecuteUbergraph_Global_Controller(int32 EntryPoint);
    void AnyKey__DelegateSignature();
    void LevelLoaded__DelegateSignature();
    void AddUI__DelegateSignature();
    void RemoveUI__DelegateSignature();
    void ShowCredits__DelegateSignature();
    void AreaIntroFinished__DelegateSignature();
    void StreamOut__DelegateSignature();
    void SpecialAreaTravel__DelegateSignature();
    void DoneLoadingLevels__DelegateSignature();
    void PCGamepadChange__DelegateSignature();
};

#endif
